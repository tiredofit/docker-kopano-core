From 71a6bb3a6f5f447c9c7c2632b2da1b436e99981d Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 11 Nov 2020 19:30:38 +0100
Subject: [PATCH 17/31] common: cure crash when ec_socket calls freeaddrinfo

freeaddrinfo can only be used with getaddrinfo, but there is a custom
allocation inside ec_socket.

References: KF-3361
---
 common/ECChannel.cpp              | 12 +++++++++---
 common/include/kopano/ECChannel.h |  1 +
 2 files changed, 10 insertions(+), 3 deletions(-)

diff --git a/common/ECChannel.cpp b/common/ECChannel.cpp
index 8c8e7ebf1..f17e43d5a 100644
--- a/common/ECChannel.cpp
+++ b/common/ECChannel.cpp
@@ -1009,15 +1009,20 @@ static int ec_fdtable_socket_ai(const ec_socket &sk)
 
 ec_socket::~ec_socket()
 {
-	if (m_ai != nullptr)
-		freeaddrinfo(m_ai);
+	if (m_ai != nullptr) {
+		if (m_custom_alloc)
+			free(m_ai);
+		else
+			freeaddrinfo(m_ai);
+	}
 	if (m_fd >= 0)
 		close(m_fd);
 }
 
 ec_socket::ec_socket(ec_socket &&o) :
 	m_spec(std::move(o.m_spec)), m_intf(std::move(o.m_intf)),
-	m_ai(o.m_ai), m_fd(o.m_fd), m_port(o.m_port)
+	m_ai(o.m_ai), m_fd(o.m_fd), m_port(o.m_port),
+	m_custom_alloc(o.m_custom_alloc)
 {
 	o.m_ai = nullptr;
 	o.m_fd = -1;
@@ -1074,6 +1079,7 @@ static ec_socket ec_bindspec_to_unixinfo(const std::string &spec)
 		return sk;
 	}
 
+	sk.m_custom_alloc = true;
 	auto ai = sk.m_ai = static_cast<struct addrinfo *>(calloc(1, sizeof(struct addrinfo) + sizeof(struct sockaddr_un)));
 	ai->ai_family   = AF_LOCAL;
 	ai->ai_socktype = SOCK_STREAM;
diff --git a/common/include/kopano/ECChannel.h b/common/include/kopano/ECChannel.h
index cf7a3f6c1..27b23db2d 100644
--- a/common/include/kopano/ECChannel.h
+++ b/common/include/kopano/ECChannel.h
@@ -84,6 +84,7 @@ struct KC_EXPORT ec_socket {
 	std::string m_spec, m_intf;
 	struct addrinfo *m_ai = nullptr;
 	int m_fd = -1, m_err = 0, m_port = 0;
+	bool m_custom_alloc = false;
 };
 
 /* accept data on connection */
-- 
2.29.2

