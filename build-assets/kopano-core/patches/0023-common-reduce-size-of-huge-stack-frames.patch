From 9cfdfd57c958497f2b5a40def82427b262972e45 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 2 Dec 2020 18:55:23 +0100
Subject: [PATCH 23/31] common: reduce size of huge stack frames

98400->96	static	KC::HrFileLFtoCRLF
65600->80	static	KC::HrMapFileToString
65600->96	static	KC::ECChannel::HrReadLine
19472->1056	static	KC::HrExtractHTMLFromRealRTF
19280->864	static	KC::HrExtractHTMLFromTextRTF
19136->720	static	KC::HrExtractHTMLFromRTF
10544->304	static	KC::PrivatePipe::PipePassLoop
10352->128	static	KC::ECLogger_Tee::logv
10320->80	static	KC::ECLogger_Pipe::logv
10320->80	static	KC::ECLogger_Pipe::log
10320->96	static	KC::ECLogger_File::logv
5104->1024	static	KC::ECConfigImpl::ReadConfigFile
4176->80	static	KC::ECChannel::HrReadAndDiscardBytes
1296->272	static	KC::unix_system
---
 common/ECChannel.cpp    | 15 ++++++++-------
 common/ECConfigImpl.cpp |  8 ++++----
 common/ECLogger.cpp     | 18 +++++++++---------
 common/UnixUtil.cpp     |  9 +++++----
 common/fileutil.cpp     | 19 +++++++++----------
 common/rtfutil.cpp      |  9 +++++----
 6 files changed, 40 insertions(+), 38 deletions(-)

diff --git a/common/ECChannel.cpp b/common/ECChannel.cpp
index f17e43d5a..b7c10ea25 100644
--- a/common/ECChannel.cpp
+++ b/common/ECChannel.cpp
@@ -340,15 +340,15 @@ HRESULT ECChannel::HrGets(char *szBuffer, size_t ulBufSize, size_t *lpulRead)
 HRESULT ECChannel::HrReadLine(std::string &strBuffer, size_t ulMaxBuffer)
 {
 	size_t ulRead = 0;
-	char buffer[65536];
+	auto buffer = std::make_unique<char[]>(65536);
 
 	// clear the buffer before appending
 	strBuffer.clear();
 	do {
-		auto hr = HrGets(buffer, 65536, &ulRead);
+		auto hr = HrGets(buffer.get(), 65536, &ulRead);
 		if (hr != hrSuccess)
 			return hr;
-		strBuffer.append(buffer, ulRead);
+		strBuffer.append(buffer.get(), ulRead);
 		if (strBuffer.size() > ulMaxBuffer)
 			return MAPI_E_TOO_BIG;
 	} while (ulRead == 65535);	// zero-terminator is not counted
@@ -407,16 +407,17 @@ HRESULT ECChannel::HrWriteLine(const std::string & strBuffer) {
 HRESULT ECChannel::HrReadAndDiscardBytes(size_t ulByteCount)
 {
 	size_t ulTotRead = 0;
-	char szBuffer[4096];
+	static constexpr size_t BUFSIZE = 4096;
+	auto szBuffer = std::make_unique<char[]>(BUFSIZE);
 
 	while (ulTotRead < ulByteCount) {
 		size_t ulBytesLeft = ulByteCount - ulTotRead;
-		auto ulRead = std::min(ulBytesLeft, sizeof(szBuffer));
+		auto ulRead = std::min(ulBytesLeft, BUFSIZE);
 
 		if (lpSSL)
-			ulRead = SSL_read(lpSSL, szBuffer, ulRead);
+			ulRead = SSL_read(lpSSL, szBuffer.get(), ulRead);
 		else
-			ulRead = recv(fd, szBuffer, ulRead, 0);
+			ulRead = recv(fd, szBuffer.get(), ulRead, 0);
 
 		if (ulRead == static_cast<size_t>(-1)) {
 			if (errno == EINTR)
diff --git a/common/ECConfigImpl.cpp b/common/ECConfigImpl.cpp
index 7fd34cac8..1b4452aef 100644
--- a/common/ECConfigImpl.cpp
+++ b/common/ECConfigImpl.cpp
@@ -396,7 +396,7 @@ bool ECConfigImpl::InitConfigFile(unsigned int ls_flags)
 bool ECConfigImpl::ReadConfigFile(const std::string &file,
     unsigned int ls_flags, unsigned int ulGroup)
 {
-	char cBuffer[MAXLINELEN]{};
+	auto cBuffer = std::make_unique<char[]>(MAXLINELEN);
 	std::string strFilename, strLine, strName, strValue;
 	size_t pos;
 
@@ -432,11 +432,11 @@ bool ECConfigImpl::ReadConfigFile(const std::string &file,
 	}
 
 	while (!feof(fp.get())) {
-		memset(&cBuffer, 0, sizeof(cBuffer));
-		if (!fgets(cBuffer, sizeof(cBuffer), fp.get()))
+		memset(cBuffer.get(), 0, MAXLINELEN);
+		if (!fgets(cBuffer.get(), MAXLINELEN, fp.get()))
 			continue;
 
-		strLine = cBuffer;
+		strLine = cBuffer.get();
 		/* Skip empty lines any lines which start with # */
 		if (strLine.empty() || strLine[0] == '#')
  			continue;
diff --git a/common/ECLogger.cpp b/common/ECLogger.cpp
index d37eda1d1..38954147d 100644
--- a/common/ECLogger.cpp
+++ b/common/ECLogger.cpp
@@ -425,7 +425,7 @@ static const char msgtrunc[] = "(message truncated due to size)";
 
 void ECLogger_File::logv(unsigned int level, const char *format, va_list &va)
 {
-	char msgbuffer[EC_LOG_BUFSIZE];
+	thread_local char msgbuffer[EC_LOG_BUFSIZE];
 	auto len = _vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va);
 	static_assert(EC_LOG_BUFSIZE >= sizeof(msgtrunc), "pick a better basic EC_LOG_BUFSIZE");
 	if (len >= sizeof(msgbuffer))
@@ -489,7 +489,7 @@ void ECLogger_Syslog::logv(unsigned int loglevel, const char *format, va_list &v
 #ifdef HAVE_VSYSLOG
 	vsyslog(levelmap[loglevel & EC_LOGLEVEL_MASK], format, va);
 #else
-	char msgbuffer[EC_LOG_BUFSIZE];
+	thread_local char msgbuffer[EC_LOG_BUFSIZE];
 	if (_vsnprintf_l(msgbuffer, sizeof(msgbuffer), format, datalocale, va) >= sizeof(msgbuffer))
 		strcpy(msgbuffer + sizeof(msgbuffer) - sizeof(msgtrunc), msgtrunc);
 	syslog(levelmap[loglevel & EC_LOGLEVEL_MASK], "%s", msgbuffer);
@@ -555,7 +555,7 @@ void ECLogger_Tee::logf(unsigned int level, const char *format, ...)
 
 void ECLogger_Tee::logv(unsigned int level, const char *format, va_list &va)
 {
-	char msgbuffer[EC_LOG_BUFSIZE];
+	thread_local char msgbuffer[EC_LOG_BUFSIZE];
 	if (_vsnprintf_l(msgbuffer, sizeof msgbuffer, format, datalocale, va) >= sizeof(msgbuffer))
 		strcpy(msgbuffer + sizeof(msgbuffer) - sizeof(msgtrunc), msgtrunc);
 	for (auto log : m_loggers)
@@ -604,7 +604,7 @@ void ECLogger_Pipe::Reset() {
 
 void ECLogger_Pipe::log(unsigned int loglevel, const char *message)
 {
-	char msgbuffer[EC_LOG_BUFSIZE];
+	thread_local char msgbuffer[EC_LOG_BUFSIZE];
 	msgbuffer[0] = loglevel;
 	msgbuffer[1] = '\0';
 	size_t off = 1, rem = sizeof(msgbuffer) - 1;
@@ -632,7 +632,7 @@ void ECLogger_Pipe::logf(unsigned int level, const char *format, ...)
 
 void ECLogger_Pipe::logv(unsigned int loglevel, const char *format, va_list &va)
 {
-	char msgbuffer[EC_LOG_BUFSIZE];
+	thread_local char msgbuffer[EC_LOG_BUFSIZE];
 	msgbuffer[0] = loglevel;
 	msgbuffer[1] = '\0';
 	size_t off = 1, rem = sizeof(msgbuffer) - 1;
@@ -699,7 +699,7 @@ namespace PrivatePipe {
 	    ECConfig *lpConfig)
 	{
 		ssize_t ret;
-		char buffer[EC_LOG_BUFSIZE]{};
+		auto buffer = std::make_unique<char[]>(EC_LOG_BUFSIZE);
 		std::string complete;
 		const char *p = NULL;
 		int s;
@@ -744,11 +744,11 @@ namespace PrivatePipe {
 			complete.clear();
 			do {
 				// if we don't read anything from the fd, it was the end
-				ret = read(readfd, buffer, sizeof buffer);
+				ret = read(readfd, buffer.get(), EC_LOG_BUFSIZE);
 				if (ret <= 0)
 					break;
-				complete.append(buffer,ret);
-			} while (ret == sizeof buffer);
+				complete.append(buffer.get(), ret);
+			} while (ret == EC_LOG_BUFSIZE);
 			if (ret <= 0)
 				break;
 
diff --git a/common/UnixUtil.cpp b/common/UnixUtil.cpp
index da5ab3228..6aa14daea 100644
--- a/common/UnixUtil.cpp
+++ b/common/UnixUtil.cpp
@@ -451,12 +451,13 @@ bool unix_system(const char *lpszLogName, const std::vector<std::string> &cmd,
 		return false;
 	}
 
-	char buffer[1024];
-	while (fgets(buffer, sizeof(buffer), fp)) {
-		size_t z = strlen(buffer);
+	static constexpr size_t BUFSIZE = 4096;
+	auto buffer = std::make_unique<char[]>(BUFSIZE);
+	while (fgets(buffer.get(), BUFSIZE, fp)) {
+		size_t z = strlen(buffer.get());
 		if (z > 0 && buffer[z-1] == '\n')
 			buffer[--z] = '\0';
-		ec_log_debug("%s[%d]: %s", lpszLogName, pid, buffer);
+		ec_log_debug("%s[%d]: %s", lpszLogName, pid, buffer.get());
 	}
 
 	fclose(fp);
diff --git a/common/fileutil.cpp b/common/fileutil.cpp
index 32f68bd5c..c5463c283 100644
--- a/common/fileutil.cpp
+++ b/common/fileutil.cpp
@@ -40,12 +40,12 @@ namespace KC {
  */
 HRESULT HrFileLFtoCRLF(FILE *fin, FILE** fout)
 {
-	char bufferin[BLOCKSIZE/2], bufferout[BLOCKSIZE+1];
-	size_t sizebufferout;
-
 	if(fin == NULL || fout == NULL)
 		return MAPI_E_INVALID_PARAMETER;
 
+	auto bufferin = std::make_unique<char[]>(BLOCKSIZE/2);
+	auto bufferout = std::make_unique<char[]>(BLOCKSIZE+1);
+	size_t sizebufferout;
 	std::unique_ptr<FILE, file_deleter> fTmp(tmpfile());
 	if(fTmp == NULL) {
 		ec_log_err("Unable to create tmp file: %s", strerror(errno));
@@ -53,14 +53,13 @@ HRESULT HrFileLFtoCRLF(FILE *fin, FILE** fout)
 	}
 
 	while (!feof(fin)) {
-		size_t readsize = fread(bufferin, 1, BLOCKSIZE / 2, fin);
+		size_t readsize = fread(bufferin.get(), 1, BLOCKSIZE / 2, fin);
 		if (ferror(fin)) {
 			ec_log_err("%s/fread: %s", __func__, strerror(errno));
 			return MAPI_E_CORRUPT_DATA;
 		}
-
-		BufferLFtoCRLF(readsize, bufferin, bufferout, &sizebufferout);
-		if (fwrite(bufferout, 1, sizebufferout, fTmp.get()) != sizebufferout) {
+		BufferLFtoCRLF(readsize, bufferin.get(), bufferout.get(), &sizebufferout);
+		if (fwrite(bufferout.get(), 1, sizebufferout, fTmp.get()) != sizebufferout) {
 			ec_log_err("%s/fwrite: %s", __func__, strerror(errno));
 			return MAPI_E_CORRUPT_DATA;
 		}
@@ -81,15 +80,15 @@ HRESULT HrFileLFtoCRLF(FILE *fin, FILE** fout)
 HRESULT HrMapFileToString(FILE *f, std::string *lpstrBuffer)
 {
 	lpstrBuffer->clear();
-	char buf[BLOCKSIZE];
+	auto buf = std::make_unique<char[]>(BLOCKSIZE);
 	while (!feof(f)) {
-		auto rd = fread(buf, 1, sizeof(buf), f);
+		auto rd = fread(buf.get(), 1, BLOCKSIZE, f);
 		if (ferror(f)) {
 			ec_log_err("MapFileToString/fread: %s", strerror(errno));
 			return MAPI_E_CORRUPT_DATA;
 		}
 		try {
-			lpstrBuffer->append(buf, rd);
+			lpstrBuffer->append(buf.get(), rd);
 		} catch (const std::bad_alloc &) {
 			ec_log_err("MapFileToString/malloc: %s", strerror(errno));
 			return MAPI_E_NOT_ENOUGH_MEMORY;
diff --git a/common/rtfutil.cpp b/common/rtfutil.cpp
index 28b95879a..d7c13a6e0 100644
--- a/common/rtfutil.cpp
+++ b/common/rtfutil.cpp
@@ -7,6 +7,7 @@
 // Parts rewritten by Zarafa
 #include <kopano/platform.h>
 #include <map>
+#include <memory>
 #include <set>
 #include <kopano/codepage.h>
 #include <kopano/CommonUtil.h>
@@ -126,7 +127,7 @@ static void InitRTFState(RTFSTATE *sState)
 }
 
 static std::wstring RTFFlushStateOutput(convert_context &convertContext,
-    RTFSTATE *sState, ULONG ulState)
+    std::unique_ptr<RTFSTATE[]> &sState, ULONG ulState)
 {
 	std::wstring wstrUnicode;
 
@@ -159,7 +160,7 @@ HRESULT HrExtractHTMLFromRTF(const std::string &lpStrRTFIn,
 	std::string strConvertCharset;
 	std::wstring strOutput;
 	int ulState = 0;
-	RTFSTATE sState[RTF_MAXSTATE];
+	auto sState = std::make_unique<RTFSTATE[]>(RTF_MAXSTATE);
 	fontmap_t mapFontToCharset;
 	convert_context convertContext;
 
@@ -380,7 +381,7 @@ HRESULT HrExtractHTMLFromTextRTF(const std::string &lpStrRTFIn,
 	int ulState = 0;
 	bool bPar = false;
 	int nLineChar=0;
-	RTFSTATE sState[RTF_MAXSTATE];
+	auto sState = std::make_unique<RTFSTATE[]>(RTF_MAXSTATE);
 	fontmap_t mapFontToCharset;
 	convert_context convertContext;
 
@@ -659,7 +660,7 @@ HRESULT HrExtractHTMLFromRealRTF(const std::string &lpStrRTFIn,
 	std::string strConvertCharset, tmp;
 	std::wstring strOutput;
 	int ulState = 0;
-	RTFSTATE sState[RTF_MAXSTATE];
+	auto sState = std::make_unique<RTFSTATE[]>(RTF_MAXSTATE);
 	convert_context convertContext;
 	fontmap_t mapFontToCharset;
 	bool bPar = false;
-- 
2.29.2

