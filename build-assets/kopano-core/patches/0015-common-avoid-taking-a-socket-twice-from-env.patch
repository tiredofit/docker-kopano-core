From 0048c8bf77e4e3803d23cee9e0a68aa6ab8aa6df Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Sat, 7 Nov 2020 12:21:17 +0100
Subject: [PATCH 15/31] common: avoid taking a socket twice from env

References: KF-3361
---
 ECtools/idx_net.cpp               |  4 +++-
 ECtools/statsd.cpp                |  4 +++-
 caldav/CalDAV.cpp                 |  7 +++++--
 common/ECChannel.cpp              | 15 ++++++++-------
 common/include/kopano/ECChannel.h |  3 ++-
 gateway/Gateway.cpp               | 13 +++++++++----
 provider/server/ECServer.cpp      | 13 +++++++++----
 spooler/DAgent.cpp                |  4 +++-
 8 files changed, 42 insertions(+), 21 deletions(-)

diff --git a/ECtools/idx_net.cpp b/ECtools/idx_net.cpp
index 0c0be9c8c..999f80894 100644
--- a/ECtools/idx_net.cpp
+++ b/ECtools/idx_net.cpp
@@ -70,12 +70,14 @@ static void *idx_thread_start(void *arg)
 
 static int idx_listen(ECConfig *cfg, std::vector<struct pollfd> &pollers)
 {
+	std::vector<int> used_fds;
 	auto lsock = tokenize(cfg->GetSetting("indexer_listen"), ' ', true);
 	auto old_addr = cfg->GetSetting("server_bind_name");
 	if (old_addr != nullptr && *old_addr != '\0')
 		lsock.emplace_back("unix:"s + old_addr);
 	auto rsock = ec_bindspec_to_sockets(std::move(lsock), S_IRWUG,
-	             cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	             cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"),
+	             used_fds);
 	auto &idx_sock = rsock.second;
 
 	struct pollfd x;
diff --git a/ECtools/statsd.cpp b/ECtools/statsd.cpp
index fbf4a652d..0375e9797 100644
--- a/ECtools/statsd.cpp
+++ b/ECtools/statsd.cpp
@@ -202,8 +202,10 @@ static void sd_mainloop(std::vector<struct pollfd> &&sk)
 
 static HRESULT sd_listen(ECConfig *cfg, std::vector<struct pollfd> &pollfd)
 {
+	std::vector<int> used_fds;
 	auto info = ec_bindspec_to_sockets(tokenize(sd_config->GetSetting("statsd_listen"), ' ', true),
-	            S_IRWUG, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	            S_IRWUG, cfg->GetSetting("run_as_user"),
+	            cfg->GetSetting("run_as_group"), used_fds);
 	if (info.first < 0)
 		return EXIT_FAILURE;
 
diff --git a/caldav/CalDAV.cpp b/caldav/CalDAV.cpp
index 4592f0e15..819ad1af5 100644
--- a/caldav/CalDAV.cpp
+++ b/caldav/CalDAV.cpp
@@ -325,13 +325,16 @@ exit:
 
 static HRESULT ical_listen(ECConfig *cfg)
 {
+	std::vector<int> g_used_fds;
 	auto info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("ical_listen"), ' ', true),
-	            S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	            S_IRWUGO, cfg->GetSetting("run_as_user"),
+	            cfg->GetSetting("run_as_group"), g_used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto ical_sock = std::move(info.second);
 	info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("icals_listen"), ' ', true),
-	       S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	       S_IRWUGO, cfg->GetSetting("run_as_user"),
+	       cfg->GetSetting("run_as_group"), g_used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto icals_sock = std::move(info.second);
diff --git a/common/ECChannel.cpp b/common/ECChannel.cpp
index 94f4c2d3f..185109c5a 100644
--- a/common/ECChannel.cpp
+++ b/common/ECChannel.cpp
@@ -1169,7 +1169,7 @@ static std::pair<int, std::list<ec_socket>> ec_bindspec_to_sockinfo(std::string
  * brackets, but ec_parse_bindaddr2 supports it by chance.
  */
 std::pair<int, std::list<ec_socket>> ec_bindspec_to_sockets(std::vector<std::string> &&in,
-    unsigned int mode, const char *user, const char *group)
+    unsigned int mode, const char *user, const char *group, std::vector<int> &used_fds)
 {
 	std::list<ec_socket> out;
 	int xerr = 0;
@@ -1182,22 +1182,23 @@ std::pair<int, std::list<ec_socket>> ec_bindspec_to_sockets(std::vector<std::str
 		}
 		out.splice(out.end(), std::move(p.second));
 	}
-	out.sort();
-	/* Avoid picking up a socket from environment into two ec_socket structs. */
-	out.unique();
 
 	for (auto &sk : out) {
 		auto fd = ec_fdtable_socket_ai(sk);
-		if (fd >= 0) {
+		if (std::find(used_fds.cbegin(), used_fds.cend(), fd) == used_fds.cend() &&
+		    fd >= 0) {
 			ec_log_info("Re-using fd %d for %s", fd, sk.m_spec.c_str());
 			sk.m_fd = fd;
+			used_fds.push_back(fd);
 			continue;
 		}
 		fd = ec_listen_generic(sk, mode, user, group);
-		if (fd < 0)
+		if (fd < 0) {
 			sk.m_err = fd;
-		else
+		} else {
 			sk.m_fd = fd;
+			used_fds.push_back(fd);
+		}
 		if (xerr == 0 && sk.m_err != 0)
 			xerr = sk.m_err;
 	}
diff --git a/common/include/kopano/ECChannel.h b/common/include/kopano/ECChannel.h
index 9cb4d5128..cf7a3f6c1 100644
--- a/common/include/kopano/ECChannel.h
+++ b/common/include/kopano/ECChannel.h
@@ -77,6 +77,7 @@ struct KC_EXPORT ec_socket {
 	ec_socket() = default;
 	ec_socket(ec_socket &&);
 	~ec_socket();
+	void operator=(ec_socket &&) = delete;
 	bool operator==(const struct ec_socket &) const;
 	bool operator<(const struct ec_socket &) const;
 
@@ -91,6 +92,6 @@ extern KC_EXPORT int kc_peer_cred(int fd, uid_t *, pid_t *);
 extern KC_EXPORT int zcp_peerfd_is_local(int);
 extern KC_EXPORT ec_socket ec_parse_bindaddr(const char *);
 extern KC_EXPORT void ec_reexec_prepare_sockets();
-extern KC_EXPORT std::pair<int, std::list<ec_socket>> ec_bindspec_to_sockets(std::vector<std::string> &&, unsigned int mode, const char *user, const char *group);
+extern KC_EXPORT std::pair<int, std::list<ec_socket>> ec_bindspec_to_sockets(std::vector<std::string> &&, unsigned int mode, const char *user, const char *group, std::vector<int> &);
 
 } /* namespace KC */
diff --git a/gateway/Gateway.cpp b/gateway/Gateway.cpp
index e2ed08667..19b9e77d5 100644
--- a/gateway/Gateway.cpp
+++ b/gateway/Gateway.cpp
@@ -451,26 +451,31 @@ exit:
 
 static HRESULT gw_listen(ECConfig *cfg)
 {
+	std::vector<int> used_fds;
 	auto info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("pop3_listen"), ' ', true),
-	            S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	            S_IRWUGO, cfg->GetSetting("run_as_user"),
+	            cfg->GetSetting("run_as_group"), used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto pop3_sock = std::move(info.second);
 
 	info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("pop3s_listen"), ' ', true),
-	       S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	       S_IRWUGO, cfg->GetSetting("run_as_user"),
+	       cfg->GetSetting("run_as_group"), used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto pop3s_sock = std::move(info.second);
 
 	info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("imap_listen"), ' ', true),
-	       S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	       S_IRWUGO, cfg->GetSetting("run_as_user"),
+	       cfg->GetSetting("run_as_group"), used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto imap_sock = std::move(info.second);
 
 	info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("imaps_listen"), ' ', true),
-	       S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	       S_IRWUGO, cfg->GetSetting("run_as_user"),
+	       cfg->GetSetting("run_as_group"), used_fds);
 	if (info.first < 0)
 		return E_FAIL;
 	auto imaps_sock = std::move(info.second);
diff --git a/provider/server/ECServer.cpp b/provider/server/ECServer.cpp
index d0e8b738d..065f5b1a4 100644
--- a/provider/server/ECServer.cpp
+++ b/provider/server/ECServer.cpp
@@ -86,6 +86,7 @@ static bool m_bIgnoreUnknownConfigOptions = false;
 static bool m_bIgnoreDbThreadStackSize = false;
 std::shared_ptr<ECConfig> g_lpConfig;
 static bool g_listen_http, g_listen_https, g_listen_pipe;
+static std::vector<int> g_used_fds;
 static std::shared_ptr<ECLogger> g_lpLogger, g_lpAudit;
 static std::unique_ptr<ECSoapServerConnection> g_lpSoapServerConn;
 static bool m_bDatabaseUpdateIgnoreSignals = false;
@@ -725,12 +726,14 @@ static void InitBindTextDomain(void)
 static int ksrv_listen_inet(ECSoapServerConnection *ssc, ECConfig *cfg)
 {
 	auto info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("server_listen"), ' ', true),
-	            S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	            S_IRWUGO, cfg->GetSetting("run_as_user"),
+	            cfg->GetSetting("run_as_group"), g_used_fds);
 	if (info.first < 0)
 		return info.first;
 	auto http_sock = std::move(info.second);
 	info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("server_listen_tls"), ' ', true),
-	       S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	       S_IRWUGO, cfg->GetSetting("run_as_user"),
+	       cfg->GetSetting("run_as_group"), g_used_fds);
 	if (info.first < 0)
 		return info.first;
 	auto https_sock = std::move(info.second);
@@ -762,7 +765,8 @@ static int ksrv_listen_pipe(ECSoapServerConnection *ssc, ECConfig *cfg)
 	for (auto &e : list)
 		e.insert(0, "unix:");
 	auto prio = ec_bindspec_to_sockets(std::move(list), S_IRWUG,
-	            cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	            cfg->GetSetting("run_as_user"),
+	            cfg->GetSetting("run_as_group"), g_used_fds);
 	if (prio.first < 0)
 		return prio.first;
 	/*
@@ -780,7 +784,8 @@ static int ksrv_listen_pipe(ECSoapServerConnection *ssc, ECConfig *cfg)
 		for (auto &e : list)
 			e.insert(0, "unix:");
 		auto info = ec_bindspec_to_sockets(std::move(list), S_IRWUGO,
-		            cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+		            cfg->GetSetting("run_as_user"),
+		            cfg->GetSetting("run_as_group"), g_used_fds);
 		if (info.first < 0)
 			return info.first;
 		auto pipe_sock = std::move(info.second);
diff --git a/spooler/DAgent.cpp b/spooler/DAgent.cpp
index d9e9cf809..65e6262ab 100644
--- a/spooler/DAgent.cpp
+++ b/spooler/DAgent.cpp
@@ -2845,8 +2845,10 @@ static void *HandlerLMTP(void *lpArg)
 static int dagent_listen(ECConfig *cfg, std::vector<struct pollfd> &pollers,
     std::vector<int> &closefd)
 {
+	std::vector<int> used_fds;
 	auto lmtp_info = ec_bindspec_to_sockets(tokenize(cfg->GetSetting("lmtp_listen"), ' ', true),
-	                 S_IRWUGO, cfg->GetSetting("run_as_user"), cfg->GetSetting("run_as_group"));
+	                 S_IRWUGO, cfg->GetSetting("run_as_user"),
+	                 cfg->GetSetting("run_as_group"), used_fds);
 	if (lmtp_info.first < 0) {
 		ec_log_err("Socket binding failed");
 		return lmtp_info.first;
-- 
2.29.2

