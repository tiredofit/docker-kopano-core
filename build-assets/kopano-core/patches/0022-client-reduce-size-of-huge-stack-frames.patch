From 7d9a520a3d9ae98014e9c717ebcf332d04c0c65a Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 2 Dec 2020 18:39:04 +0100
Subject: [PATCH 22/31] client: reduce size of huge stack frames

165232->896	static	ECExchangeModifyTable::HrSerializeTable
165136->816	static	ECExchangeModifyTable::HrDeserializeTable
164976->640	static	ECMAPIProp::GetSerializedACLData
164928->592	static	ECMAPIProp::SetSerializedACLData
4304->208	dynamic,bounded	ECMessage::GetRtfData
---
 provider/client/ECExchangeModifyTable.cpp | 38 ++++++++++----------
 provider/client/ECMAPIProp.cpp            | 42 +++++++++++------------
 provider/client/ECMessage.cpp             |  8 +++--
 3 files changed, 44 insertions(+), 44 deletions(-)

diff --git a/provider/client/ECExchangeModifyTable.cpp b/provider/client/ECExchangeModifyTable.cpp
index 832e22807..20ce9a70f 100644
--- a/provider/client/ECExchangeModifyTable.cpp
+++ b/provider/client/ECExchangeModifyTable.cpp
@@ -393,12 +393,12 @@ HRESULT	ECExchangeModifyTable::HrSerializeTable(ECMemTable *lpTable, char **lppS
 	std::ostringstream os;
 	struct rowSet *	lpSOAPRowSet = NULL;
 	char *szXML = NULL;
-	struct soap soap;
+	auto xsoap = std::make_unique<soap>();
 
 	auto laters = make_scope_success([&]() {
 		soap_del_PointerTorowSet(&lpSOAPRowSet);
-		soap_destroy(&soap);
-		soap_end(&soap); // clean up allocated temporaries
+		soap_destroy(xsoap.get());
+		soap_end(xsoap.get()); // clean up allocated temporaries
 	});
 
 	// Get a view
@@ -427,13 +427,13 @@ HRESULT	ECExchangeModifyTable::HrSerializeTable(ECMemTable *lpTable, char **lppS
 		return hr;
 
 	// Convert to XML
-	soap_set_omode(&soap, SOAP_C_UTFSTRING);
-	soap_begin(&soap);
-	soap.os = &os;
-	soap_serialize_rowSet(&soap, lpSOAPRowSet);
-	if (soap_begin_send(&soap) != 0 ||
-	    soap_put_rowSet(&soap, lpSOAPRowSet, "tableData", "rowSet") != 0 ||
-	    soap_end_send(&soap) != 0)
+	soap_set_omode(xsoap.get(), SOAP_C_UTFSTRING);
+	soap_begin(xsoap.get());
+	xsoap->os = &os;
+	soap_serialize_rowSet(xsoap.get(), lpSOAPRowSet);
+	if (soap_begin_send(xsoap.get()) != 0 ||
+	    soap_put_rowSet(xsoap.get(), lpSOAPRowSet, "tableData", "rowSet") != 0 ||
+	    soap_end_send(xsoap.get()) != 0)
 		return MAPI_E_NETWORK_ERROR;
 
 	// os now contains XML for row data
@@ -452,22 +452,22 @@ HRESULT ECExchangeModifyTable::HrDeserializeTable(char *lpSerialized, ECMemTable
 	rowset_ptr lpsRowSet;
 	unsigned int cValues, ulHighestRuleID = 1;
 	SPropValue		sRowId;
-	struct soap soap;
+	auto xsoap = std::make_unique<soap>();
 	convert_context converter;
 
 	auto laters = make_scope_success([&]() {
-		soap_destroy(&soap);
-		soap_end(&soap); // clean up allocated temporaries
+		soap_destroy(xsoap.get());
+		soap_end(xsoap.get()); // clean up allocated temporaries
 	});
 
-	soap.is = &is;
-	soap_set_imode(&soap, SOAP_C_UTFSTRING);
-	soap_begin(&soap);
-	if (soap_begin_recv(&soap) != 0)
+	xsoap->is = &is;
+	soap_set_imode(xsoap.get(), SOAP_C_UTFSTRING);
+	soap_begin(xsoap.get());
+	if (soap_begin_recv(xsoap.get()) != 0)
 		return MAPI_E_NETWORK_FAILURE;
-	if (!soap_get_rowSet(&soap, &sSOAPRowSet, "tableData", "rowSet"))
+	if (!soap_get_rowSet(xsoap.get(), &sSOAPRowSet, "tableData", "rowSet"))
 		return MAPI_E_CORRUPT_DATA;
-	if (soap_end_recv(&soap) != 0)
+	if (soap_end_recv(xsoap.get()) != 0)
 		return MAPI_E_NETWORK_FAILURE;
 	auto hr = CopySOAPRowSetToMAPIRowSet(NULL, &sSOAPRowSet, &~lpsRowSet, 0);
 	if(hr != hrSuccess)
diff --git a/provider/client/ECMAPIProp.cpp b/provider/client/ECMAPIProp.cpp
index e3a8fec95..44b737ab9 100644
--- a/provider/client/ECMAPIProp.cpp
+++ b/provider/client/ECMAPIProp.cpp
@@ -494,14 +494,14 @@ HRESULT ECMAPIProp::GetSerializedACLData(LPVOID lpBase, LPSPropValue lpsPropValu
 	object_ptr<IECSecurity> ptrSecurity;
 	ULONG				cPerms = 0;
 	ECPermissionPtr		ptrPerms;
-	struct soap			soap;
+	auto xsoap = std::make_unique<soap>();
 	std::ostringstream	os;
 	struct rightsArray	rights;
 	std::string			strAclData;
 
 	auto laters = make_scope_success([&]() {
-		soap_destroy(&soap);
-		soap_end(&soap); // clean up allocated temporaries
+		soap_destroy(xsoap.get());
+		soap_end(xsoap.get()); // clean up allocated temporaries
 	});
 	auto hr = QueryInterface(IID_IECSecurity, &~ptrSecurity);
 	if (hr != hrSuccess)
@@ -511,16 +511,16 @@ HRESULT ECMAPIProp::GetSerializedACLData(LPVOID lpBase, LPSPropValue lpsPropValu
 		return hr;
 
 	rights.__size = cPerms;
-	rights.__ptr  = soap_new_rights(&soap, cPerms);
+	rights.__ptr  = soap_new_rights(xsoap.get(), cPerms);
 	std::transform(ptrPerms.get(), ptrPerms + cPerms, rights.__ptr, &ECPermToRightsCheap);
 
-	soap_set_omode(&soap, SOAP_C_UTFSTRING);
-	soap_begin(&soap);
-	soap.os = &os;
-	soap_serialize_rightsArray(&soap, &rights);
-	if (soap_begin_send(&soap) != 0 ||
-	    soap_put_rightsArray(&soap, &rights, "rights", "rightsArray") != 0 ||
-	    soap_end_send(&soap) != 0)
+	soap_set_omode(xsoap.get(), SOAP_C_UTFSTRING);
+	soap_begin(xsoap.get());
+	xsoap->os = &os;
+	soap_serialize_rightsArray(xsoap.get(), &rights);
+	if (soap_begin_send(xsoap.get()) != 0 ||
+	    soap_put_rightsArray(xsoap.get(), &rights, "rights", "rightsArray") != 0 ||
+	    soap_end_send(xsoap.get()) != 0)
 		return MAPI_E_NETWORK_ERROR;
 
 	strAclData = os.str();
@@ -535,28 +535,26 @@ HRESULT ECMAPIProp::SetSerializedACLData(const SPropValue *lpsPropValue)
 		return MAPI_E_INVALID_PARAMETER;
 
 	ECPermissionPtr		ptrPerms;
-	struct soap			soap;
+	auto xsoap = std::make_unique<soap>();
 	struct rightsArray	rights;
 	std::string			strAclData;
 
 	auto laters = make_scope_success([&]() {
-		soap_destroy(&soap);
-		soap_end(&soap); // clean up allocated temporaries
+		soap_destroy(xsoap.get());
+		soap_end(xsoap.get()); // clean up allocated temporaries
 	});
 
 	{
 		std::istringstream is(std::string(reinterpret_cast<const char *>(lpsPropValue->Value.bin.lpb), lpsPropValue->Value.bin.cb));
 
-		soap.is = &is;
-		soap_set_imode(&soap, SOAP_C_UTFSTRING);
-		soap_begin(&soap);
-		if (soap_begin_recv(&soap) != 0)
+		xsoap->is = &is;
+		soap_set_imode(xsoap.get(), SOAP_C_UTFSTRING);
+		soap_begin(xsoap.get());
+		if (soap_begin_recv(xsoap.get()) != 0)
 			return MAPI_E_NETWORK_FAILURE;
-
-		if (!soap_get_rightsArray(&soap, &rights, "rights", "rightsArray"))
+		if (!soap_get_rightsArray(xsoap.get(), &rights, "rights", "rightsArray"))
 			return MAPI_E_CORRUPT_DATA;
-
-		if (soap_end_recv(&soap) != 0)
+		if (soap_end_recv(xsoap.get()) != 0)
 			return MAPI_E_NETWORK_ERROR;
 	}
 	auto hr = MAPIAllocateBuffer(rights.__size * sizeof(ECPERMISSION), &~ptrPerms);
diff --git a/provider/client/ECMessage.cpp b/provider/client/ECMessage.cpp
index e860fca2f..857798109 100644
--- a/provider/client/ECMessage.cpp
+++ b/provider/client/ECMessage.cpp
@@ -6,6 +6,7 @@
 #	include "config.h"
 #endif
 #include <algorithm>
+#include <memory>
 #include <string>
 #include <utility>
 #include <vector>
@@ -2291,7 +2292,8 @@ HRESULT ECMessage::GetBodyType(const std::string &rtf, eBodyType *lpulBodyType)
 HRESULT ECMessage::GetRtfData(std::string *lpstrRtfData)
 {
 	StreamPtr ptrRtfCompressedStream, ptrRtfUncompressedStream;
-	char lpBuf[4096];
+	static constexpr size_t BUFSIZE = 4096;
+	auto lpBuf = std::make_unique<char[]>(BUFSIZE);
 	std::string strRtfData;
 
 	auto hr = OpenProperty(PR_RTF_COMPRESSED, &IID_IStream, 0, 0, &~ptrRtfCompressedStream);
@@ -2316,12 +2318,12 @@ HRESULT ECMessage::GetRtfData(std::string *lpstrRtfData)
 	while (1) {
 		ULONG ulRead;
 
-		hr = ptrRtfUncompressedStream->Read(lpBuf, 4096, &ulRead);
+		hr = ptrRtfUncompressedStream->Read(lpBuf.get(), BUFSIZE, &ulRead);
 		if (hr != hrSuccess)
 			return hr;
 		if (ulRead == 0)
 			break;
-		strRtfData.append(lpBuf, ulRead);
+		strRtfData.append(lpBuf.get(), ulRead);
 	}
 
 	*lpstrRtfData = std::move(strRtfData);
-- 
2.29.2

