From fa9ad605bcb6b1de7a5870d266dccbab005283aa Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 2 Dec 2020 22:12:36 +0100
Subject: [PATCH 30/31] ECtools: reduce size of large stack frames

5648->5520	dynamic,bounded	admin.cpp:main
5520->3056	static	admin.cpp:print_help
1872->1664	static	admin.cpp:DisplayUserCount
1744->1440	static	storeadm.cpp:adm_list_orphans
672->496	static	admin.cpp:print_users
640->672(!)	static	admin.cpp:print_extra_settings
464->494(!)	static	stats.cpp:MAPITablePrint
4352->272	static	KC::ECArchiverLogger::CreateFormat
1360->336	static	ECConfigCheck::readConfigFile
---
 ECtools/archiver/ECArchiverLogger.cpp  | 11 ++++++-----
 ECtools/cfgchecker/ECConfigCheck.cpp   | 10 ++++++----
 common/ConsoleTable.cpp                |  9 ++++++---
 common/ConsoleTable.h                  |  9 ++++++---
 common/include/kopano/charset/traits.h | 12 ++++++++++++
 5 files changed, 36 insertions(+), 15 deletions(-)

diff --git a/ECtools/archiver/ECArchiverLogger.cpp b/ECtools/archiver/ECArchiverLogger.cpp
index 1a183c1df..324ae9ff5 100644
--- a/ECtools/archiver/ECArchiverLogger.cpp
+++ b/ECtools/archiver/ECArchiverLogger.cpp
@@ -48,18 +48,19 @@ void ECArchiverLogger::logv(unsigned int loglevel, const char *format, va_list &
 
 std::string ECArchiverLogger::CreateFormat(const char *format)
 {
-	char buffer[4096];
+	static constexpr size_t BUFSIZE = 4096;
+	auto buffer = std::make_unique<char[]>(BUFSIZE);
 	std::string strPrefix;
 
 	if (m_strUser.empty())
 		return strPrefix + format;
 
 	if (m_strFolder.empty()) {
-		auto len = snprintf(buffer, sizeof(buffer), "For \"" TSTRING_PRINTF "\": ", m_strUser.c_str());
-		strPrefix = EscapeFormatString(std::string(buffer, len));
+		auto len = snprintf(buffer.get(), BUFSIZE, "For \"" TSTRING_PRINTF "\": ", m_strUser.c_str());
+		strPrefix = EscapeFormatString(std::string(buffer.get(), len));
 	} else {
-		auto len = snprintf(buffer, sizeof(buffer), "For \"" TSTRING_PRINTF "\" in folder \"" TSTRING_PRINTF "\": ", m_strUser.c_str(), m_strFolder.c_str());
-		strPrefix = EscapeFormatString(std::string(buffer, len));
+		auto len = snprintf(buffer.get(), BUFSIZE, "For \"" TSTRING_PRINTF "\" in folder \"" TSTRING_PRINTF "\": ", m_strUser.c_str(), m_strFolder.c_str());
+		strPrefix = EscapeFormatString(std::string(buffer.get(), len));
 	}
 
 	return strPrefix + format;
diff --git a/ECtools/cfgchecker/ECConfigCheck.cpp b/ECtools/cfgchecker/ECConfigCheck.cpp
index c8b7c9f59..6bc587cd7 100644
--- a/ECtools/cfgchecker/ECConfigCheck.cpp
+++ b/ECtools/cfgchecker/ECConfigCheck.cpp
@@ -3,6 +3,7 @@
  * Copyright 2005 - 2016 Zarafa and its licensors
  */
 #include <iostream>
+#include <memory>
 #include <string>
 #include <utility>
 #include <sys/stat.h>
@@ -44,7 +45,8 @@ static void clearCharacters(std::string &s, const std::string &whitespaces)
 
 void ECConfigCheck::readConfigFile(const char *lpszConfigFile)
 {
-	char cBuffer[1024];
+	static constexpr size_t BUFSIZE = 1024;
+	auto cBuffer = std::make_unique<char[]>(BUFSIZE);
 
 	if (!lpszConfigFile) {
 		m_bDirty = true;
@@ -57,11 +59,11 @@ void ECConfigCheck::readConfigFile(const char *lpszConfigFile)
 	}
 
 	while (!feof(fp)) {
-		memset(&cBuffer, 0, sizeof(cBuffer));
-		if (!fgets(cBuffer, sizeof(cBuffer), fp))
+		memset(cBuffer.get(), 0, BUFSIZE);
+		if (!fgets(cBuffer.get(), BUFSIZE, fp))
 			continue;
 
-		std::string strLine = cBuffer, strName, strValue;
+		std::string strLine = cBuffer.get(), strName, strValue;
 		/* Skip empty lines any lines which start with # */
 		if (strLine.empty() || strLine[0] == '#')
 			continue;
diff --git a/common/ConsoleTable.cpp b/common/ConsoleTable.cpp
index 27bac794d..336b292c1 100644
--- a/common/ConsoleTable.cpp
+++ b/common/ConsoleTable.cpp
@@ -7,6 +7,9 @@
 #include <algorithm>
 #include <iostream>
 #include <string>
+#if __cplusplus >= 201700L
+#	include <string_view>
+#endif
 #include <vector>
 
 namespace KC {
@@ -69,7 +72,7 @@ void ConsoleTable::Resize(size_t rows, size_t columns)
  * @param[in] entry name of the header
  * @retval		true on success, false if offsets are out of range
  */
-bool ConsoleTable::SetHeader(size_t col, const std::string &entry)
+bool ConsoleTable::SetHeader(size_t col, const string_view &entry)
 {
 	size_t len;
 
@@ -91,7 +94,7 @@ bool ConsoleTable::SetHeader(size_t col, const std::string &entry)
  * @param[in]	entry	utf-8 string to set in the table in current terminal charset
  * @retval		true on success, false if offsets are out of range
  */
-bool ConsoleTable::AddColumn(size_t col, const std::string &entry)
+bool ConsoleTable::AddColumn(size_t col, const string_view &entry)
 {
 	if (col >= m_iColumns)
 		return false;
@@ -111,7 +114,7 @@ bool ConsoleTable::AddColumn(size_t col, const std::string &entry)
  * @param[in]	entry	utf-8 string to set in the table in current terminal charset
  * @retval		true on success, false if offsets are out of range
  */
-bool ConsoleTable::SetColumn(size_t row, size_t col, const std::string &entry)
+bool ConsoleTable::SetColumn(size_t row, size_t col, const string_view &entry)
 {
 	if (col >= m_iColumns || row >= m_iRows)
 		return false;
diff --git a/common/ConsoleTable.h b/common/ConsoleTable.h
index c2717c4df..d27c70b1d 100644
--- a/common/ConsoleTable.h
+++ b/common/ConsoleTable.h
@@ -5,6 +5,9 @@
 #pragma once
 #include <kopano/zcdefs.h>
 #include <string>
+#if __cplusplus >= 201700L
+#	include <string_view>
+#endif
 #include <vector>
 #include <kopano/charset/convert.h>
 
@@ -15,10 +18,10 @@ public:
 	ConsoleTable(size_t rows, size_t columns);
 	void Clear();
 	void Resize(size_t rows, size_t columns);
-	bool SetHeader(size_t col, const std::string& entry);
+	bool SetHeader(size_t col, const string_view &entry);
 	void set_lead(const char *lead) { m_lead = lead; }
-	bool AddColumn(size_t col, const std::string& entry);
-	bool SetColumn(size_t row, size_t col, const std::string& entry);
+	bool AddColumn(size_t col, const string_view &entry);
+	bool SetColumn(size_t row, size_t col, const string_view &entry);
 	void PrintTable();
 	void DumpTable();
 
diff --git a/common/include/kopano/charset/traits.h b/common/include/kopano/charset/traits.h
index 22f406989..93003a3c2 100644
--- a/common/include/kopano/charset/traits.h
+++ b/common/include/kopano/charset/traits.h
@@ -7,6 +7,9 @@
 #include <kopano/platform.h>
 #include <string>
 #include <cstring>
+#if KC_USES_CXX17
+#	include <string_view>
+#endif
 
 namespace KC {
 
@@ -42,6 +45,15 @@ public:
 	}
 };
 
+#if KC_USES_CXX17
+template<> class iconv_charset<std::string_view> KC_FINAL {
+public:
+	static const char *name() { return CHARSET_CHAR; }
+	static const char *rawptr(const std::string_view &from) { return from.data(); }
+	static size_t rawsize(const std::string_view &from) { return from.size(); }
+};
+#endif
+
 template<> class iconv_charset<char *> KC_FINAL {
 public:
 	static const char *name() {
-- 
2.29.2

