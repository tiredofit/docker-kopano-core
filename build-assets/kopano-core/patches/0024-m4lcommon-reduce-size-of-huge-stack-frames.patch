From 909cdaaea6056b3670bfc9565e69948da19dbecb Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Wed, 2 Dec 2020 18:39:16 +0100
Subject: [PATCH 24/31] m4lcommon: reduce size of huge stack frames

262464->320	static	KC::Util::HrTextToHtml
262240->112	static	KC::Util::HrTextToRtf
65632->96	static	KC::Util::HrStreamToString(IStream*, std::wstring&)
65632->96	static	KC::Util::HrStreamToString(IStream*, std::string&)
---
 m4lcommon/Util.cpp | 20 ++++++++++----------
 1 file changed, 10 insertions(+), 10 deletions(-)

diff --git a/m4lcommon/Util.cpp b/m4lcommon/Util.cpp
index 104a130b6..f46fef2a4 100644
--- a/m4lcommon/Util.cpp
+++ b/m4lcommon/Util.cpp
@@ -1224,7 +1224,7 @@ HRESULT Util::HrTextToHtml(IStream *text, IStream *html, ULONG ulCodepage)
 {
 	ULONG cRead;
 	std::wstring strHtml;
-	wchar_t lpBuffer[BUFSIZE];
+	auto lpBuffer = std::make_unique<wchar_t[]>(BUFSIZE);
 	static const char header1[] = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n" \
 					"<HTML>\n" \
 					"<HEAD>\n" \
@@ -1277,7 +1277,7 @@ HRESULT Util::HrTextToHtml(IStream *text, IStream *html, ULONG ulCodepage)
 
 	while (1) {
 		strHtml.clear();
-		hr = text->Read(lpBuffer, BUFSIZE * sizeof(wchar_t), &cRead);
+		hr = text->Read(lpBuffer.get(), BUFSIZE * sizeof(wchar_t), &cRead);
 		if (hr != hrSuccess)
 			goto exit;
 
@@ -1398,7 +1398,7 @@ HRESULT Util::HrTextToHtml(const wchar_t *text, std::string &strHTML, ULONG ulCo
 HRESULT Util::HrTextToRtf(IStream *text, IStream *rtf)
 {
 	ULONG cRead;
-	wchar_t c[BUFSIZE];
+	auto c = std::make_unique<wchar_t[]>(BUFSIZE);
 	static const char header[] = "{\\rtf1\\ansi\\ansicpg1252\\fromtext \\deff0{\\fonttbl\n" \
 					"{\\f0\\fswiss Arial;}\n" \
 					"{\\f1\\fmodern Courier New;}\n" \
@@ -1411,7 +1411,7 @@ HRESULT Util::HrTextToRtf(IStream *text, IStream *rtf)
 	rtf->Write(header, strlen(header), NULL);
 
 	while(1) {
-		auto ret = text->Read(c, BUFSIZE * sizeof(wchar_t), &cRead);
+		auto ret = text->Read(c.get(), BUFSIZE * sizeof(wchar_t), &cRead);
 		if (ret != hrSuccess || cRead == 0)
 			break;
 		cRead /= sizeof(wchar_t);
@@ -1646,7 +1646,7 @@ bool Util::ValidatePropTagArray(const SPropTagArray *lpPropTagArray)
 HRESULT Util::HrStreamToString(IStream *sInput, std::string &strOutput) {
 	object_ptr<ECMemStream> lpMemStream;
 	ULONG ulRead = 0;
-	char buffer[BUFSIZE];
+	auto buffer = std::make_unique<char[]>(BUFSIZE);
 
 	if (sInput->QueryInterface(IID_ECMemStream, &~lpMemStream) == hrSuccess) {
 		// getsize, getbuffer, assign
@@ -1658,10 +1658,10 @@ HRESULT Util::HrStreamToString(IStream *sInput, std::string &strOutput) {
 	if (hr != hrSuccess)
 		return hr;
 	while (1) {
-		hr = sInput->Read(buffer, BUFSIZE, &ulRead);
+		hr = sInput->Read(buffer.get(), BUFSIZE, &ulRead);
 		if (hr != hrSuccess || ulRead == 0)
 			break;
-		strOutput.append(buffer, ulRead);
+		strOutput.append(buffer.get(), ulRead);
 	}
 	return hr;
 }
@@ -1680,7 +1680,7 @@ HRESULT Util::HrStreamToString(IStream *sInput, std::string &strOutput) {
 HRESULT Util::HrStreamToString(IStream *sInput, std::wstring &strOutput) {
 	object_ptr<ECMemStream> lpMemStream;
 	ULONG ulRead = 0;
-	char buffer[BUFSIZE];
+	auto buffer = std::make_unique<char[]>(BUFSIZE);
 
 	if (sInput->QueryInterface(IID_ECMemStream, &~lpMemStream) == hrSuccess) {
 		// getsize, getbuffer, assign
@@ -1692,10 +1692,10 @@ HRESULT Util::HrStreamToString(IStream *sInput, std::wstring &strOutput) {
 	if (hr != hrSuccess)
 		return hr;
 	while (1) {
-		hr = sInput->Read(buffer, BUFSIZE, &ulRead);
+		hr = sInput->Read(buffer.get(), BUFSIZE, &ulRead);
 		if (hr != hrSuccess || ulRead == 0)
 			break;
-		strOutput.append(reinterpret_cast<wchar_t *>(buffer), ulRead / sizeof(wchar_t));
+		strOutput.append(reinterpret_cast<wchar_t *>(buffer.get()), ulRead / sizeof(wchar_t));
 	}
 	return hr;
 }
-- 
2.29.2

