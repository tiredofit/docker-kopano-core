#!/usr/bin/with-contenv bash

certificates() {
    CA_NAME=${CA_NAME:-"kopano-selfsigned-ca"}
    CA_SUBJECT=${CA_SUBJECT:-"/C=XX/ST=Kopano/L=Kopano/O=Kopano/CN="}
    CA_CERT_SUBJECT=${CA_CERT_SUBJECT:-${CA_SUBJECT}${CA_NAME}}
    CA_CERT_FILE=${CA_CERT_FILE:-"/certs/${CA_NAME}/${CA_NAME}.crt"}
    CA_KEY_FILE=${CA_KEY_FILE:-"$(dirname ${CA_CERT_FILE})/${CA_NAME}.key"}
    CREATE_CA=${CREATE_CA:-"TRUE"}

    certificates_create_certificate_authority() {
        if [ ! -f ${CA_CERT_FILE} ] ; then

            print_debug "Certificates: Creating Self Signed Certificate Authority"
            mkdir -p $(dirname ${CA_CERT_FILE})
            chown -R kopano:kopano $(dirname ${CA_CERT_FILE})
            sudo -u kopano echo "000a" > $(dirname ${CA_CERT_FILE})/serial
            sudo -u kopano touch $(dirname ${CA_CERT_FILE})/certindex

            silent eval "openssl req \
                  -newkey rsa:4096 -keyout ${CA_KEY_FILE} \
                  -x509 -days 3650 -nodes -out ${CA_CERT_FILE} \
                  -subj \"${CA_CERT_SUBJECT}\""
           
            chown -R kopano:kopano ${CA_KEY_FILE} ${CA_CERT_FILE}

            sudo -u kopano cat > $(dirname ${CA_CERT_FILE})/$CA_NAME.conf << EOF
            [ ca ]
            default_ca = $CA_NAME

            [ $CA_NAME ]
            unique_subject = no
            new_certs_dir = .
            certificate = ${CA_CERT_FILE}
            database = $(dirname ${CA_CERT_FILE})/certindex
            private_key = ${CA_KEY_FILE}
            serial = $(dirname ${CA_CERT_FILE})/serial
            default_days = 3650
            default_md = sha256
            policy = ${CA_NAME}_policy
            x509_extensions = ${CA_NAME}_extensions

            [ ${CA_NAME}_policy ]
            commonName = supplied
            stateOrProvinceName = supplied
            countryName = supplied
            emailAddress = optional
            organizationName = supplied
            organizationalUnitName = optional

            [ ${CA_NAME}_extensions ]
            basicConstraints = CA:false
            subjectKeyIdentifier = hash
            authorityKeyIdentifier = keyid:always
            keyUsage = digitalSignature,keyEncipherment
            extendedKeyUsage = serverAuth,clientAuth

            [ req ]
            default_bits = 2048
            string_mask = utf8only
            default_md = sha256
            x509_extensions = v3_ca

            [default_conf]
            ssl_conf = ssl_sect

            [ssl_sect]
            system_default = system_default_sect

            [system_default_sect]
            MinProtocol = TLSv1.1
            MaxProtocol = TLSv1.2
            CipherString = DEFAULT
EOF
        else
            print_debug "Certificates: CA Already Exists"
        fi
    }

    certificates_create_certificate() {
        if [ "$1" != "" ] ; then

            if var_true $CREATE_CA ; then
                if [ ! -f ${CA_CERT_FILE} ] || [ ! -f ${CA_KEY_FILE} ] ; then
                    print_debug "Certificates: No CA Found - Creating before generating certificates"
                    certificates_create_certificate_authority
                fi
            fi            
            CERT_SUBJECT="${CA_SUBJECT}$(basename ${1%%.*})"

            if var_true $CREATE_CA ; then
                if [ ! -f ${1%%.*}.key ] ; then
                    print_debug "Certificates: Creating Certificate: ${1}"
                    silent eval "openssl req \
                          -newkey rsa:2048 -keyout ${1%%.*}.key \
                          -nodes -out ${1%%.*}.csr \
                          -subj \"${CERT_SUBJECT}\" \
                          -addext \"subjectAltName = DNS:localhost\""
                    chown -R kopano:kopano ${1%%.*}.key ${1%%.*}.csr
                fi
            else
                if [ ! -f ${1%%.*}.key ] ; then
                    print_debug "Certificates: Creating Certificate: ${1}"
                    silent eval "openssl req \
                          -new -x509 -nodes -days 3650 
                          -config /usr/lib/ssl/openssl.cnf 
                          -out ${1%%.*}.crt \
                          -keyout ${1%%.*}.key"
                    chown -R kopano:kopano ${1%%.*}.key ${1%%.*}.crt
                fi
            fi

            if var_true $CREATE_CA ; then
                if [ ! -f ${1%%.*}.cert ] ; then
                    print_debug "Certificates: Signing Certificate: ${1}"
                    silent eval "openssl ca -batch -config $(dirname ${CA_CERT_FILE})/${CA_NAME}.conf -notext -in ${1%%.*}.csr -out ${1%%.*}.crt"
                    chown -R kopano:kopano ${1%%.*}.crt
                    rm -rf $(tail -n 1 $(dirname ${CA_CERT_FILE})/certindex | awk '{print $3}').pem
                    rm -rf ${1%%.*}.csr
                fi
            fi

            if [ -f ${1%%.*}.crt ] && [ -f ${1%%.*}.key ] ; then
                print_debug "Certificates: Merging Certificate and Key for: ${1}"
                sudo -u kopano cat ${1%%.*}.crt ${1%%.*}.key > ${1%%.*}.pem
                chown -R kopano:kopano ${1%%.*}.pem
            fi

            if [ ! -f ${SERVER_SSL_PUBLIC_PATH}$(basename ${1%%.*})-public.pem ] ; then
                print_debug "Certificates: Creating Public Key for: ${1}"
                mkdir -p ${SERVER_SSL_PUBLIC_PATH}
                chown -R kopano:kopano ${SERVER_SSL_PUBLIC_PATH}
                silent openssl x509 -in ${1%%.*}.crt -out ${SERVER_SSL_PUBLIC_PATH}$(basename ${1%%.*})-public.pem -pubkey
                chown -R kopano:kopano ${SERVER_SSL_PUBLIC_PATH}$(basename ${1%%.*})-public.pem
            fi
        fi
    }

    certificates_check_permissions() {
        if sudo -u kopano [ ! -r "${1}" ] ; then
            print_debug "Certificates: Setting Read Permissions on ${1}"
            chmod 444 ${1}
        fi
    }

    certificates_check_certificates() {
        print_debug "Certificates: Checking Existence of ${1}"
        if [ ! -f ${1} ] ; then
                mkdir -p $(dirname ${1})
                chown -R kopano:kopano $(dirname ${1})
                certificates_create_certificate ${1}
        fi
    }

    certificates_trust_ca() {
        if var_true $CREATE_CA ; then
            if [ -f ${CA_CERT_FILE} ]; then
                if [ ! -L /usr/local/share/ca-certificates/$(basename ${CA_CERT_FILE}) ] ; then
                    print_debug "Certificates: Trusting CA ${CA_NAME}"
                    ln -sf ${CA_CERT_FILE} /usr/local/share/ca-certificates/
                    silent dpkg-reconfigure ca-certificates
                fi
            fi
        fi
    }

    case "$1" in
        *)
            certificates_check_certificates ${1}
            certificates_check_permissions ${1}
            certificates_trust_ca
        ;;
    esac
}

configure_autorespond() {
    mkdir -p ${AUTORESPOND_PATH}
    chown -R kopano: ${AUTORESPOND_PATH}
    truefalse_yesno AUTORESPOND_AUTORESPOND_CC
    truefalse_yesno AUTORESPOND_AUTORESPOND_BCC
    truefalse_yesno AUTORESPOND_AUTORESPOND_NORECIPIENTS
    truefalse_yesno AUTORESPOND_COPY_TO_SENTMAIL
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Autorespond: Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}backup.cfg
## Custom Generated Kopano Autoresponder Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

autorespond_cc = ${AUTORESPOND_AUTORESPOND_CC}
autorespond_bcc = ${AUTORESPOND_AUTORESPOND_BCC}
autorespond_norecip = ${AUTORESPOND_AUTORESPOND_NORECIPIENTS}
timelimit = ${AUTORESPOND_REPLY_TIME_LIMIT}
senddb = ${AUTORESPOND_PATH}${AUTORESPOND_FILE}
copy_to_sentmail = ${AUTORESPOND_COPY_TO_SENTMAIL}
EOF
    else
        print_info "Autorespond: Skipping Auto Configuration"
    fi
}

configure_backup() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Backup: Auto Configuring"
        if [[ $SOCKET_SERVER == *"https://"* ]]; then
            backup_sslkey=$(cat <<EOF
sslkey_file = ${BACKUP_SSL_KEY_FILE}
EOF
                        )
            if [ -v SERVER_SSL_KEY_PASS ]; then
                backup_sslkey=$(echo "${backup_sslkey}" ; cat<<EOF
ssl_key_pass = ${BACKUP_SSL_KEY_PASS}
EOF
                )
            fi
        fi
        cat <<EOF > ${CONFIG_PATH}backup.cfg
## Custom Generated Kopano Backup Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_socket = ${BACKUP_SOCKET_SERVER}
${backup_sslkey}
log_method = file
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_BACKUP}
log_timestamp = ${LOG_TIMESTAMPS}
worker_processes = ${BACKUP_WORKER_PROCESSES}
EOF
    else
        print_info "Backup: Skipping Auto Configuration"
    fi
}

configure_calendar() {
    if var_true $ENABLE_CALENDAR ; then
        print_notice "Calendar: Enabled"
        sanity_var CALENDAR_HOSTNAME "Calendar Hostname"        
        
        ### Configure Nginx
        if [ "${CALENDAR_HOSTNAME}" = "${WEBAPP_HOSTNAME}" ] ; then
            sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/calendar.template;" /etc/nginx/conf.available/webapp.template  
        else
            sed -i "s|<CALENDAR_HOSTNAME>|${CALENDAR_HOSTNAME}|g" /etc/nginx/conf.available/calendar.template
            ln -s /etc/nginx/conf.available/calendar.template /etc/nginx/conf.d/calendar.conf
        fi
        sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/conf.available/calendar.template
        sed -i "s|<WEBROOT_CALENDAR>|${CALENDAR_WEBROOT}|g" /etc/nginx/conf.available/calendar.template
        sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/calendar.template
        sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/calendar.template
        ln -sf /etc/nginx/conf.available/calendar.template /etc/nginx/conf.d/calendar.conf
        mkdir -p $(dirname ${CONFIG_PATH}${MEET_CONFIG_FILE})

        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Calendar: Auto Configuring"
        else
            print_info "Calendar: Skipping Auto Configuration"
        fi

        configure_grapi
        configure_kapi
        configure_kwm
        configure_konnect
    fi
}

configure_cron_ldap_sync() {
    print_debug "CRON: Adding LDAP Sync routines"
    echo "*/30 * * * * /usr/sbin/kopano-admin --sync" >> /assets/cron/crontab.txt
}

configure_cron_purge_deleted () {
    print_debug "CRON: Adding Storage Purge routines"
    echo "30 0 * * * /usr/sbin/kopano-srvadm --purge-softdelete=${SERVER_PURGE_SOFTDELETE}" >> /assets/cron/crontab.txt
}

configure_cron_zpush_gab2contacts() {
    print_debug "CRON: Adding Z-Push GAB <> Contacts Sync routines"
    echo "0 * * * * sudo -u nginx /usr/share/z-push/tools/gab2contacts/gab2contacts.php -a sync" >> /assets/cron/crontab.txt
}

configure_dagent() {
    if var_true $ENABLE_DAGENT ; then
        if var_true $DAGENT_LOW_RAW_MESSAGES ; then 
            mkdir -p ${DAGENT_PATH_RAW_MESSAGES}
            chown -R kopano:kopano ${DAGENT_PATH_RAW_MESSAGES}
        fi

        if var_true $DAGENT_PLUGIN_ENABLED ; then 
            mkdir -p ${DAGENT_PATH_PLUGIN}
            chown -R kopano: ${DAGENT_PATH_PLUGIN} 
        fi

        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "DAgent: Auto Configuring"
            if [[ $SOCKET_SERVER == *"https://"* ]]; then
                certificates ${DAGENT_SSL_CERT_FILE}
                dagent_sslkey=$(cat <<EOF
sslkey_file = ${DAGENT_SSL_KEY_FILE}
EOF
                        )
                if [ -v DAGENT_SSL_KEY_PASS ]; then
                    dagent_sslkey=$(echo "${dagent_sslkey}" ; cat<<EOF
ssl_key_pass = ${DAGENT_SSL_KEY_PASS}
EOF
                    )
                fi
            fi

            case "$DAGENT_LOG_RAW_MESSAGES" in
                "TRUE" | "true" | "YES" | "yes" )
                    dagent_log_raw_message="yes"
                ;;
                "FALSE" | "false" | "NO" | "no" )
                    dagent_log_raw_message="no"
                ;;
                "ALL" | "all" )
                    dagent_log_raw_message="all"
                ;;
                *)
                    dagent_log_raw_message=${DAGENT_LOG_RAW_MESSAGES}
                ;;
            esac

            if var_true DAGENT_ENABLE_FORWARD_WHITELIST ; then
                dagent_forward_whitelist=$(cat <<EOF
forward_whitelist_domains = ${DAGENT_FORWARD_WHITELIST_DOMAINS}
forward_whitelist_domain_subject = ${DAGENT_FORWARD_WHITELIST_DOMAINS_SUBJECT}
forward_whitelist_domain_message = ${DAGENT_FORWARD_WHITELIST_DOMAINS_MESSAGE}
EOF
                                        )

                if [ -n "${DAGENT_FORWARD_WHITELIST_DOMAINS_FILE}" ] ; then
                    dagent_forward_whitelist=$(echo "${dagent_forward_whitelist}" ; cat<<EOF
forward_whitelist_domains_file = ${DAGENT_FORWARD_WHITELIST_DOMAINS_FILE}
EOF
                                            )
                fi

                if [ -n "${DAGENT_FORWARD_WHITELIST_DOMAINS_MESSAGE_FILE}" ] ; then
                    dagent_forward_whitelist=$(echo "${dagent_forward_whitelist}" ; cat<<EOF
forward_whitelist_domain_message_file = ${DAGENT_FORWARD_WHITELIST_DOMAINS_MESSAGE_FILE}
EOF
                                            )
                fi
            fi

            if [ -n "${DAGENT_SPAM_HEADER_VALUE}" ] ; then
                dagent_spam_header_value="spam_header_value = ${DAGENT_SPAM_HEADER_VALUE}"
            fi

            truefalse_yesno DAGENT_ENABLE_PLUGIN
            truefalse_yesno DAGENT_ARCHIVE_ON_DELIVERY
            truefalse_yesno DAGENT_SET_RULE_HEADERS
            truefalse_yesno DAGENT_NO_DOUBLE_FORWARD
            truefalse_yesno DAGENT_HTML_SAFETY_FILTER
            truefalse_yesno DAGENT_INSECURE_HTML_JOIN

            cat <<EOF > ${CONFIG_PATH}dagent.cfg
## Custom Generated Kopano DAgent Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

lmtp_listen = ${DAGENT_LISTEN_HOST}:${DAGENT_LISTEN_PORT}
server_socket = ${DAGENT_SOCKET_SERVER}
${dagent_sslkey}
coredump_enabled = ${ENABLE_COREDUMPS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_DAGENT}
log_timestamp = ${LOG_TIMESTAMPS}
log_raw_message = ${dagent_log_raw_message}
log_raw_message_path = ${DAGENT_PATH_RAW_MESSAGES}
lmtp_max_threads = ${DAGENT_LMTP_MAX_THREADS}
spam_header_name = ${DAGENT_SPAM_HEADER_NAME}
archive_on_delivery = ${DAGENT_ARCHIVE_ON_DELIVERY}
plugin_enabled = ${DAGENT_ENABLE_PLUGIN}
plugin_path = ${DAGENT_PATH_PLUGIN}
set_rule_headers = ${DAGENT_SET_RULE_HEADERS}
no_double_forward = ${DAGENT_NO_DOUBLE_FORWARD}
html_safety_filter = ${DAGENT_HTML_SAFETY_FILTER}
insecure_html_join = ${DAGENT_INSECURE_HTML_JOIN}
${dagent_forward_whitelist}
${dagent_spam_header_value}
EOF
        else
            print_info "DAgent: Skipping Auto Configuration"
        fi
    fi
}

configure_gateway() {
    if var_true $ENABLE_GATEWAY ; then
        certificates ${GATEWAY_SSL_CERT_FILE}
        certificates ${GATEWAY_SSL_KEY_FILE}
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Gateway: Auto Configuring"
            
            if var_true $GATEWAY_ENABLE_POP3 ; then
                print_debug "Gateway: Enabling POP3"
                gateway_interfaces=$(echo "${gateway_interfaces}" ; cat<<EOF
pop3_listen = ${GATEWAY_LISTEN_HOST_POP3}:${GATEWAY_LISTEN_PORT_POP3}
EOF
                    )
            fi

            if var_true $GATEWAY_ENABLE_POP3S ; then
                print_debug "Gateway: Enabling POP3S"
                gateway_interfaces=$(echo "${gateway_interfaces}" ; cat<<EOF
pop3s_listen = ${GATEWAY_LISTEN_HOST_POP3_SECURE}:${GATEWAY_LISTEN_PORT_POP3_SECURE}
EOF
                    )
            fi

            if var_true $GATEWAY_ENABLE_IMAP ; then
                print_debug "Gateway: Enabling IMAP"
                gateway_interfaces=$(echo "${gateway_interfaces}" ; cat<<EOF
imap_listen = ${GATEWAY_LISTEN_HOST_IMAP}:${GATEWAY_LISTEN_PORT_IMAP}
EOF
                    )
            fi

            if var_true $GATEWAY_ENABLE_IMAPS ; then
                print_debug "Gateway: Enabling IMAPS"
                gateway_interfaces=$(echo "${gateway_interfaces}" ; cat<<EOF
imaps_listen = ${GATEWAY_LISTEN_HOST_IMAP_SECURE}:${GATEWAY_LISTEN_PORT_IMAP_SECURE}
EOF
                )
            fi

            truefalse_yesno GATEWAY_BYPASS_AUTHENTICATION_ADMIN
            truefalse_yesno GATEWAY_GREETING_SHOW_HOSTNAME
            truefalse_yesno GATEWAY_HTML_SAFETY_FILTER
            truefalse_yesno GATEWAY_IMAP_ONLY_MAIL_FOLDERS
            truefalse_yesno GATEWAY_IMAP_SHOW_PUBLIC_FOLDERS
            truefalse_yesno GATEWAY_SSL_PREFER_SERVER_CIPHERS
            truefalse_yesno GATEWAY_SSL_REQUIRE_PLAINTEXT_AUTH
            cat <<EOF > ${CONFIG_PATH}gateway.cfg
## Custom Generated Kopano Gateway Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

${gateway_interfaces}
ssl_private_key_file = ${GATEWAY_SSL_KEY_FILE}
ssl_certificate_file = ${GATEWAY_SSL_CERT_FILE}
disable_plaintext_auth = ${GATEWAY_SSL_REQUIRE_PLAINTEXT_AUTH}
ssl_prefer_server_ciphers = ${GATEWAY_SSL_PREFER_SERVER_CIPHERS}
server_socket = ${GATEWAY_SOCKET_SERVER}
bypass_auth = ${GATEWAY_BYPASS_AUTHENTICATION_ADMIN}
server_hostname_greeting = ${GATEWAY_GREETING_SHOW_HOSTNAME}
server_hostname = ${GATEWAY_HOSTNAME}
coredump_enabled = ${ENABLE_COREDUMPS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_GATEWAY}
log_timestamp = ${LOG_TIMESTAMPS}
imap_only_mailfolders = ${GATEWAY_IMAP_ONLY_MAIL_FOLDERS}
imap_public_folders = ${GATEWAY_IMAP_SHOW_PUBLIC_FOLDERS}
imap_max_messagesize = ${GATEWAY_IMAP_MAX_MESSAGE_SIZE}
imap_max_fail_commands = ${GATEWAY_IMAP_MAX_FAIL_COMMANDS}
html_safety_filter = ${GATEWAY_HTML_SAFETY_FILTER}
EOF
        else
            print_info "Gateway: Skipping Auto Configuration"
        fi
    fi
}

configure_grapi() {
    if var_true $ENABLE_GRAPI ; then
        if var_true $grapi_configured ; then
            :
        else
            mkdir -p ${SOCKET_GRAPI}
            if [ "$SETUP_TYPE" = "AUTO" ]; then
                print_notice "Configuring GRAPI Server"
                mkdir -p $GRAPI_PATH
                truefalse_yesno GRAPI_DISABLE_TLS_VALIDATION
                truefalse_yesno GRAPI_ENABLE_EXPERIMENTAL_ENDPOINTS
                cat <<EOF > ${CONFIG_PATH}${GRAPI_CONFIG_FILE}
# Custom Generated Kopano GRAPI Server Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(date)

enable_experimental_endpoints = ${GRAPI_ENABLE_EXPERIMENTAL_ENDPOINTS}
insecure = ${GRAPI_DISABLE_TLS_VALIDATION}
log_level = ${grapi_log_level}
num_workers = ${GRAPI_WORKERS}
persistency_path = ${GRAPI_PATH}
pid_file = ${GRAPI_PID_FILE}
server_socket = ${GRAPI_SOCKET_SERVER}
socket_path = ${SOCKET_GRAPI}
EOF
            else
                print_info "GRAPI: Skipping Auto Configuration"
            fi
        grapi_configured=TRUE
        fi
    fi
}

### ICAL Needs Work
configure_ical() {
    if var_true $ENABLE_ICAL ; then
        certificates ${ICAL_SSL_CERT_FILE}
        certificates ${ICAL_SSL_KEY_FILE}
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "ICAL: Auto Configuring"

            if var_true $ICAL_ENABLE_HTTP ; then
                print_debug "ICAL: Enabling HTTP"
                ical_interfaces=$(echo "${ical_interfaces}" ; cat<<EOF
ical_listen = ${ICAL_LISTEN_HOST}:${ICAL_LISTEN_PORT}
EOF
                    )
            fi

            if var_true $ICAL_ENABLE_HTTPS ; then
                print_debug "ICAL: Enabling HTTPS"
                ical_interfaces=$(echo "${ical_interfaces}" ; cat<<EOF
icals_listen = ${ICAL_LISTEN_HOST_SECURE}:${ICAL_LISTEN_PORT_SECURE}
EOF
                    )
            fi

            truefalse_yesno ICAL_ENABLE_ICAL_GET
            cat <<EOF > ${CONFIG_PATH}ical.cfg
## Custom Generated Kopano ICal Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

${ical_interfaces}
ssl_private_key_file = ${ICAL_SSL_KEY_FILE}
ssl_certificate_file = ${ICAL_SSL_CERT_FILE}
ssl_prefer_server_ciphers = ${GATEWAY_SSL_PREFER_SERVER_CIPHERS}
server_socket = ${ICAL_SOCKET_SERVER}
coredump_enabled = ${ENABLE_COREDUMPS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_ICAL}
log_timestamp = ${LOG_TIMESTAMPS}
server_timezone = ${TIMEZONE}
enable_ical_get = ${ICAL_ENABLE_ICAL_GET}
EOF
        else
            print_info "ICAL: Skipping Auto Configuration"
        fi
    fi
}

configure_install_id() {
    print_debug "Updating Machine ID with INSTALL_ID value: ${INSTALL_ID}"
    echo ${INSTALL_ID} > /etc/machine-id
    echo ${INSTALL_ID} > /var/lib/dbus/machine-id
}

### LDAP Needs Work
configure_ldap() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Configuring LDAP"
        truefalse_yesno LDAP_STARTTLS
        cat <<EOF > ${CONFIG_PATH}ldap.cfg
## Custom Generated Kopano LDAP Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

## Generated for LDAP Type: ${LDAP_TYPE}

ldap_uri = ${LDAP_URI}
ldap_starttls = ${LDAP_STARTTLS}

ldap_bind_user = ${LDAP_BIND_DN}
ldap_bind_passwd = ${LDAP_BIND_PASS}
ldap_search_base = ${LDAP_BASE_DN}
ldap_network_timeout = ${LDAP_TIMEOUT}
ldap_page_size = ${LDAP_PAGE_SIZE}

ldap_last_modification_attribute = ${LDAP_ATTRIBUTE_LAST_MODIFICATION}

# Object settings
ldap_object_type_attribute = ${LDAP_OBJECT_ATTRIBUTE_TYPE}
ldap_user_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_USER}
ldap_group_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_GROUP}
ldap_contact_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_CONTACT}
ldap_company_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_COMPANY}
ldap_addresslist_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_ADDRESSLIST}
ldap_dynamicgroup_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_DYNAMICGROUP}
ldap_server_type_attribute_value = ${LDAP_OBJECT_ATTRIBUTE_TYPE_SERVER}

# User Settings
ldap_user_search_filter = ${LDAP_FILTER_USER_SEARCH}
ldap_user_unique_attribute = ${LDAP_ATTRIBUTE_USER_UNIQUE}
ldap_user_unique_attribute_type = ${LDAP_ATTRIBUTE_TYPE_USER_UNIQUE}
ldap_fullname_attribute = ${LDAP_ATTRIBUTE_FULLNAME}
ldap_loginname_attribute = ${LDAP_ATTRIBUTE_LOGINNAME}
ldap_password_attribute = ${LDAP_ATTRIBUTE_PASSWORD}
ldap_authentication_method = ${LDAP_AUTHENTICATION_METHOD}
ldap_emailaddress_attribute = ${LDAP_ATTRIBUTE_EMAIL_ADDRESS}
ldap_emailaliases_attribute = ${LDAP_ATTRIBUTE_EMAIL_ALIASES}
ldap_isadmin_attribute = ${LDAP_ATTRIBUTE_ISADMIN}
ldap_nonactive_attribute = ${LDAP_ATTRIBUTE_NONACTIVE}
ldap_resource_type_attribute = ${LDAP_ATTRIBUTE_RESOURCETYPE}
ldap_resource_capacity_attribute = ${LDAP_ATTRIBUTE_RESOURCECAPACITY}
ldap_sendas_attribute = ${LDAP_ATTRIBUTE_SENDAS}
ldap_sendas_attribute_type = ${LDAP_ATTRIBUTE_TYPE_SENDAS}
ldap_sendas_relation_attribute = ${LDAP_ATTRIBUTE_SENDAS_RELATION} 
ldap_user_certificate_attribute = ${LDAP_ATTRIBUTE_USER_CERTIFICATE}

# Group settings
ldap_group_search_filter = ${LDAP_FILTER_GROUP_SEARCH}
ldap_group_unique_attribute = ${LDAP_ATTRIBUTE_GROUP_UNIQUE}
ldap_group_unique_attribute_type = ${LDAP_ATTRIBUTE_TYPE_GROUP_UNIQUE}
ldap_groupname_attribute = ${LDAP_ATTRIBUTE_GROUP_NAME}
ldap_groupmembers_attribute = ${LDAP_ATTRIBUTE_GROUP_MEMBERS}
ldap_groupmembers_attribute_type = ${LDAP_ATTRIBUTE_TYPE_GROUP_MEMBERS}
ldap_groupmembers_relation_attribute = ${LDAP_ATTRIBUTE_LDAP_ATTRIBUTE_GROUP_MEMBERS_RELATION}
ldap_group_security_attribute = ${LDAP_ATTRIBUTE_TYPE_GROUP_SECURITY}
ldap_group_security_attribute_type = ${LDAP_ATTRIBUTE_TYPE_GROUP_SECURITY}

# Company settings
ldap_company_search_filter = ${LDAP_FILTER_COMPANY_SEARCH}
ldap_company_unique_attribute = ${LDAP_ATTRIBUTE_COMPANY_UNIQUE}
ldap_company_unique_attribute_type = ${LDAP_ATTRIBUTE_TYPE_COMPANY_UNIQUE}
ldap_companyname_attribute = ${LDAP_ATTRIBUTE_COMPANY_NAME}
ldap_company_view_attribute = ${LDAP_ATTRIBUTE_COMPANY_VIEW}
ldap_company_view_attribute_type = ${LDAP_ATTRIBUTE_TYPE_COMPANY_VIEW}
ldap_company_view_relation_attribute = ${LDAP_ATTRIBUTE_COMPANY_VIEW_RELATION}
ldap_company_admin_attribute = ${LDAP_ATTRIBUTE_COMPANY_ADMIN}
ldap_company_admin_attribute_type = ${LDAP_ATTRIBUTE_TYPE_COMPANY_ADMIN}
ldap_company_admin_relation_attribute = ${LDAP_ATTRIBUTE_COMPANY_ADMIN_RELATION} 
ldap_company_system_admin_attribute = ${LDAP_ATTRIBUTE_COMPANY_ADMIN}
ldap_company_system_admin_attribute_type = ${LDAP_ATTRIBUTE_TYPE_COMPANY_SYSADMIN}
ldap_company_system_admin_relation_attribute = ${LDAP_ATTRIBUTE_COMPANY_SYSADMIN_RELATION}

# Addresslist settings
ldap_addresslist_search_filter = ${LDAP_FILTER_ADDRESSLIST_SEARCH}
ldap_addresslist_unique_attribute = ${LDAP_ATTRIBUTE_ADDRESSLIST_UNIQUE}
ldap_addresslist_unique_attribute_type = ${LDAP_ATTRIBUTE_TYPE_ADDRESSLIST_UNIQUE}
ldap_addresslist_filter_attribute = ${LDAP_ATTRIBUTE_ADDRESSLIST_FILTER}
ldap_addresslist_search_base_attribute = ${LDAP_ATTRIBUTE_ADDRESSLIST_SEARCH_BASE}
ldap_addresslist_name_attribute = ${LDAP_ATTRIBUTE_ADDRESSLIST_NAME}

# Dynamicgroup settings
ldap_dynamicgroup_search_filter = ${LDAP_FILTER_DYNAMICGROUP_SEARCH}
ldap_dynamicgroup_unique_attribute = ${LDAP_ATTRIBUTE_DYNAMICGROUP_UNIQUE}
ldap_dynamicgroup_unique_attribute_type = ${LDAP_ATTRIBUTE_TYPE_DYNAMICGROUP_UNIQUE}
ldap_dynamicgroup_filter_attribute = ${LDAP_ATTRIBUTE_DYNAMICGROUP_FILTER}
ldap_dynamicgroup_search_base_attribute = ${LDAP_ATTRIBUTE_DYNAMICGROUP_SEARCH_BASE}
ldap_dynamicgroup_name_attribute = ${LDAP_ATTRIBUTE_DYNAMICGROUP_NAME}

# Quota settings
ldap_quota_userwarning_recipients_attribute = kopanoQuotaUserWarningRecipients
ldap_quota_userwarning_recipients_attribute_type = ${LDAP_ATTRIBUTE_TYPE_QUOTA_USERWARNING_RECIPIENTS}
ldap_quota_userwarning_recipients_relation_attribute = ${LDAP_ATTRIBUTE_QUOTA_USERWARNING_RECIPIENTS_RELATION}
ldap_quota_companywarning_recipients_attribute = ${LDAP_ATTRIBUTE_QUOTA_COMPANYWARNING_RECIPIENTS}
ldap_quota_companywarning_recipients_attribute_type = ${LDAP_ATTRIBUTE_TYPE_QUOTA_COMPANYWARNING_RECIPIENTS}
ldap_quota_companywarning_recipients_relation_attribute = ${LDAP_ATTRIBUTE_QUOTA_COMPANYWARNING_RECIPIENTS_RELATION}
ldap_quotaoverride_attribute = ${LDAP_ATTRIBUTE_QUOTA_OVERRIDE}
ldap_warnquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_WARN}
ldap_softquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_SOFT}
ldap_hardquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_HARD}
ldap_userdefault_quotaoverride_attribute = kopanoUserDefaultQuotaOverride
ldap_userdefault_warnquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_USERDEFAULT_WARN}
ldap_userdefault_softquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_USERDEFAULT_SOFT}
ldap_userdefault_hardquota_attribute = ${LDAP_ATTRIBUTE_QUOTA_USERDEFAULT_HARD}
ldap_quota_multiplier = ${LDAP_QUOTA_MULTIPLIER}

# Misc. settings
ldap_addressbook_hide_attribute = ${LDAP_ATTRIBUTE_ADDRESSBOOK_HIDDEN}
ldap_object_search_filter = ${LDAP_FILTER_OBJECT_SEARCH}
ldap_filter_cutoff_elements = ${LDAP_FILTER_CUTOFF_ELEMENTS}

# Multi-server settings
ldap_user_server_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_USER_SERVER}
ldap_company_server_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_COMPANY_SERVER}
ldap_server_address_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_ADDRESS}
ldap_server_http_port_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_LDAP_SERVER_HTTPS_PORT}
ldap_server_ssl_port_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_LDAP_SERVER_HTTPS_PORT}
ldap_server_file_path_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_LDAP_SERVER_FILE_PATH}
ldap_server_contains_public_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_LDAP_SERVER_CONTAINS_PUBLIC}
ldap_server_proxy_path_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_LDAP_SERVER_PROXY_URL}
ldap_server_search_filter = ${LDAP_FILTER_MULTIUSER_SERVER_SEARCH}
ldap_server_unique_attribute = ${LDAP_ATTRIBUTE_MULTIUSER_SERVER_UNIQUE}

# Load extra user properties from the propmap file
!propmap ${CONFIG_PATH}${LDAP_FILE_PROPMAP}

EOF

        cat <<EOF > ${CONFIG_PATH}${LDAP_FILE_PROPMAP}
## Custom Generated Kopano LDAP Propmap Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)
# PR_EC_ENABLED_FEATURES
0x67B3101E  =   kopanoEnabledFeatures

# PR_EC_DISABLED_FEATURES
0x67B4101E  =   kopanoDisabledFeatures

# PR_EC_ARCHIVE_SERVERS
0x67C4101E  =   kopanoUserArchiveServers

# PR_EC_ARCHIVE_COUPLINGS
0x67C5101E  =   kopanoUserArchiveCouplings

# PR_EC_EXCHANGE_DN
0x6788001E  =   

# PR_EC_AB_HIDDEN
0x67A7000B      = kopanoHidden

# PR_BUSINESS_TELEPHONE_NUMBER
0x3A08001E  =   telephoneNumber

# PR_BUSINESS2_TELEPHONE_NUMBER
0x3A1B101E  =   otherTelephone

# PR_BUSINESS_FAX_NUMBER
0x3A24001E  =   otherFacsimileTelephoneNumber

# PR_MOBILE_TELEPHONE_NUMBER
0x3A1C001E  =   mobile

# PR_HOME_TELEPHONE_NUMBER
0x3A09001E  =   phone

# PR_HOME2_TELEPHONE_NUMBER
0x3A2F101E  =

# PR_PRIMARY_FAX_NUMBER
0x3A23001E  =   facsimileTelephoneNumber

# PR_PAGER_TELEPHONE_NUMBER
0x3A21001E  =

# PR_COMMENT
#0x3004001E =   description

# PR_DEPARTMENT_NAME (OpenLDAP: departmentNumber, ADS: department)
0x3A18001E  =   department

# PR_OFFICE_LOCATION
0x3A19001E  =

# PR_GIVEN_NAME
0x3A06001E  =   givenName

# PR_SURNAME
0x3A11001E  =   sn

# PR_CHILDRENS_NAMES
0x3A58101E  =

# PR_BUSINESS_ADDRESS_CITY
0x3A27001E  =

# PR_TITLE
0x3A17001E  =   title

# PR_USER_CERTIFICATE
#0x3A220102 =   userCertificate

# PR_INITIALS
0x3A0A001E  =   initials

# PR_LANGUAGE
0x3A0C001E  =   preferredLanguage

# PR_ORGANIZATIONAL_ID_NUMBER
0x3A10001E  =   employeeNumber

# PR_POSTAL_ADDRESS (business address if made into contact)
0x3A15001E  =   postalAddress

# PR_COMPANY_NAME (ADS only)
0x3A16001E  =   company

# PR_COUNTRY
0x3A26001E  =   addressCountry

# PR_STATE_OR_PROVINCE
0x3A28001E  =   addressProvince

# PR_STREET_ADDRESS (encoded in ads?)
0x3A29001E  =   address

# PR_POSTAL_CODE
0x3A2A001E  =   addressPostal

# PR_POST_OFFICE_BOX
0x3A2B001E  =   postOfficeBox

# PR_ASSISTANT (should result in a DN to another user)
0x3A30001E  =   
# PR_EMS_AB_WWW_HOME_PAGE
0x8175101E  =   

# PR_BUSINESS_HOME_PAGE
0x3A51001E  =   

# This enables GAB contact photos
# Please note that the MAPI property has a 4K size limit
# Larger images will not be shown
# Recommended sizes are either 96x96 or 128x128
# For AD, it is recommended to use thumbnailPhoto

# PR_EMS_AB_THUMBNAIL_PHOTO
0x8C9E0102  =   jpegPhoto

# PR_EMS_AB_X509_CERT (aka PR_EMS_AB_TAGGED_X509_CERT)
0x8C6A1102  =   userCertificate;binary

# PR_EMS_AB_IS_MEMBER_OF_DL
#0x80081102 =   memberOf

# PR_EMS_AB_REPORTS
#0x800E1102 =   directReports

# PR_MANAGER_NAME (should result in a DN to another user)
#0x8005001E =   manager

# PR_EMS_AB_OWNER
#0x800C001E =   managedBy

# PR_EMS_AB_OBJECT_GUID
0x8C6D0102  =   EntryUUID
EOF
    else
        print_info "LDAP: Skipping Auto Configuration"
    fi
}

configure_logging() {
    
    print_debug "Logging: Configuring Kopano"
    if [ "${LOG_TYPE}" = "FILE" ] || [ "${LOG_TYPE}" = "file" ] ; then
        mkdir -p ${LOG_PATH_KOPANO}
        chown -R kopano: ${LOG_PATH_KOPANO}
        sed -i -e "s#<KOPANO_LOG_LOCATION>#${LOG_PATH_KOPANO}#g" /etc/logrotate.d/kopano
    else
        rm -rf /etc/logrotate.d/kopano
    fi
    
    if var_true $ENABLE_ZPUSH ; then
        if [ "${LOG_TYPE}" = "FILE" ] || [ "${LOG_TYPE}" = "file" ] ; then
            mkdir -p ${LOG_PATH_ZPUSH} 
            chown -R ${NGINX_USER}:${NGINX_GROUP} ${LOG_PATH_ZPUSH}
            sed -i -e "s#<ZPUSH_LOG_LOCATION>#${LOG_PATH_ZPUSH}#g" /etc/logrotate.d/zpush
        else
            rm -rf /etc/logrotate.d/zpush
        fi
    else
        rm -rf /etc/logrotate.d/zpush
    fi

    ### Translate Logging
    case "$LOG_LEVEL" in
        "NONE" | "none" | "disabled" | "0" )
            LOG_LEVEL=0
            files_log_level="NONE"
            webapp_log_level="OFF"
            zpush_log_level="OFF"
            ${LOG_FILE_GRAPI="/dev/null"}
            ${LOG_FILE_API="/dev/null"}
            ${LOG_FILE_KDAV="/dev/null"}
            ${LOG_FILE_KONNECT="/dev/null"}
            ${LOG_FILE_KWMSERVER="/dev/null"}
        ;;
        "CRITICAL" | "critical" | "crit" | "1" )
            LOG_LEVEL=1
            files_log_level="ERROR"
            grapi_log_level="critical"
            kapi_log_level="fatal"
            kdav_log_level="FATAL"
            konnect_log_level="fatal"
            kwm_log_level="fatal"
            webapp_log_level="FATAL"
            zpush_log_level="FATAL"
        ;;
        "ERROR" | "error" | "err" | "2" )
            LOG_LEVEL=2
            files_log_level="ERROR"
            grapi_log_level="error"
            kapi_log_level="error"
            kdav_log_level="ERROR"
            konnect_log_level="error"
            kwm_log_level="error"
            webapp_log_level="ERROR"
            zpush_log_level="ERROR"
        ;;
        "WARN" | "warn" | "3" )
            LOG_LEVEL=3
            files_log_level="NORMAL"
            grapi_log_level="warning"
            kapi_log_level="warn"
            kdav_log_level="WARN"
            konnect_log_level="warn"
            kwm_log_level="warn"
            webapp_log_level="WARN"
            zpush_log_level="WARN"
        ;;
        "NOTICE" | "notice" | "4" )
            LOG_LEVEL=4
            files_log_level="NORMAL"
            grapi_log_level="info"
            kapi_log_level="info"
            kdav_log_level="INFO"
            konnect_log_level="info"
            kwm_log_level="info"
            webapp_log_level="WARN"
            zpush_log_level="WARN"
        ;;
        "INFO" | "info" | "5" )
            LOG_LEVEL=5
            files_log_level="NORMAL"
            grapi_log_level="info"
            kapi_log_level="info"
            kdav_log_level="INFO"
            konnect_log_level="info"
            kwm_log_level="info"
            webapp_log_level="INFO"
            zpush_log_level="INFO"
                    ;;
        "DEBUG" | "debug" | "6" )
            LOG_LEVEL=6
            files_log_level="DEBUG"
            grapi_log_level="debug"
            kapi_log_level="debug"
            kdav_log_level="DEBUG"
            konnect_log_level="debug"
            kwm_log_level="debug"
            webapp_log_level="DEBUG"
            zpush_log_level="DEBUG"
        ;;
        "WBXML" | "wbxml" )
            LOG_LEVEL=6
            files_log_level="DEBUG"
            grapi_log_level="debug"
            kapi_log_level="debug"
            kdav_log_level="DEBUG"
            konnect_log_level="debug"
            kwm_log_level="debug"
            webapp_log_level="DEBUG"
            zpush_log_level="WBXML"
        ;;
        "DEVICEID" | "deviceid" )
            LOG_LEVEL=6
            files_log_level="DEBUG"
            grapi_log_level="debug"
            kapi_log_level="debug"
            kdav_log_level="DEBUG"
            konnect_log_level="debug"
            kwm_log_level="debug"
            webapp_log_level="DEBUG"
            zpush_log_level="DEVICEID"
        ;;
        "WBXMLSTACK" | "wbxmlstack" )
            LOG_LEVEL=6
            files_log_level="DEBUG"
            grapi_log_level="debug"
            kapi_log_level="debug"
            kdav_log_level="DEBUG"
            konnect_log_level="debug"
            kwm_log_level="debug"
            webapp_log_level="DEBUG"
            zpush_log_level="WBXMLSTACK"
        ;;

    esac

    truefalse_yesno LOG_TIMESTAMPS

    if [ "$LOG_FILE_BACKUP" = "NONE" ] || [ "$LOG_FILE_BACKUP" = "none" ] || [ "$LOG_FILE_BACKUP" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_BACKUP="-"
    fi

    if [ "$LOG_FILE_DAGENT" = "NONE" ] || [ "$LOG_FILE_DAGENT" = "none" ] || [ "$LOG_FILE_DAGENT" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_DAGENT="-"
    fi

    if [ "$LOG_FILE_GATEWAY" = "NONE" ] || [ "$LOG_FILE_GATEWAY" = "none" ] || [ "$LOG_FILE_GATEWAY" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_DAGENT="-"
    fi

    if [ "$LOG_FILE_ICAL" = "NONE" ] || [ "$LOG_FILE_ICAL" = "none" ] || [ "$LOG_FILE_ICAL" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_ICAL="-"
    fi

    if [ "$LOG_FILE_MONITOR" = "NONE" ] || [ "$LOG_FILE_MONITOR" = "none" ] || [ "$LOG_FILE_MONITOR" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_MONITOR="-"
    fi

    if [ "$LOG_FILE_SEARCH" = "NONE" ] || [ "$LOG_FILE_SEARCH" = "none" ] || [ "$LOG_FILE_SEARCH" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_SEARCH="-"
    fi

    if [ "$LOG_FILE_SERVER" = "NONE" ] || [ "$LOG_FILE_SERVER" = "none" ] || [ "$LOG_FILE_SERVER" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_SERVER="-"
    fi

    if [ "$LOG_FILE_SPOOLER" = "NONE" ] || [ "$LOG_FILE_SPOOLER" = "none" ] || [ "$LOG_FILE_SPOOLER" = "-" ] ; then
        LOG_PATH_KOPANO=""
        LOG_FILE_SPOOLER="-"
    fi
}

## Needs Work
configure_kapi() {
    if var_true ${ENABLE_KAPI} ; then
        if var_true ${kapi_configured}; then
            :
        else
            if [ -v SERVER_OIDC_IDENTIFIER ]; then
                print_notice "KAPI: Auto Configuring"
                if [ "${KAPI_LISTEN_HOST}" = "0.0.0.0" ] ; then KAPI_HOST="127.0.0.1"; fi;
                sed -i "s|<KAPI_HOST>|${KAPI_HOST}|g" /etc/nginx/conf.available/upstream-kapi.template
                sed -i "s|<KAPI_PORT>|${KAPI_PORT}|g" /etc/nginx/conf.available/upstream-kapi.template
                ln -sf /etc/nginx/conf.available/upstream-kapi.template /etc/nginx/conf.d/upstream-kapi.conf
                if [ "${KAPI_HOST}" != "127.0.0.1" ] || [ "${KAPI_HOST}" != "localhost" ] ; then
                    print_debug "KAPI: Host is not localhost"
                    if var_true $KAPI_HOST_SECURE ; then
                        print_debug "KAPI: Changing to use HTTPS"
                        sed -i "s|proxy_pass http://kapi/|proxy_pass https://kapi/|g" /etc/nginx/confd.available/meet.template
                        sed -i "s|proxy_pass http://kapi/|proxy_pass https://kapi/|g" /etc/nginx/confd.available/calendar.template
                    fi
                fi

                case "${KAPI_KVS_DB_TYPE}" in
                    "SQLITE3" | "SQLITE" | "sqlite" | "sqlite3" )
                        print_debug "KAPI: Setting SQLite3 Data Type"
                        mkdir -p $(dirname ${KAPI_KVS_DB_SQLITE_FILE})
                        kapi_kvs_db_driver="sqlite3"
                        kapi_kvs_db_dsn=${KAPI_KVS_DB_SQLITE_FILE}
                        print_debug "KAPI: ${kapi_kvs_db_driver} | DSN: ${kapi_kvs_db_dsn}"
                    ;;
                    "MYSQL" | "mysql" | "MARIADB" | "MARIADB" )
                        print_debug "KAPI: Setting MariaDB Data Type"
                        kapi_kvs_db_driver="mysql"
                        kapi_kvs_db_dsn="[${KAPI_KVS_DB_USER}[:${KAPI_KVS_DB_PASS}]@][protocol[(${KAPI_KVS_DB_HOST})]]/${KAPI_KVS_DB_NAME}[?param1=value1&...&paramN=valueN]" // Needs Work
                        print_debug "KAPI: ${kapi_kvs_db_driver} | DSN: ${kapikvs_db_dsn}"
                    ;;
                esac

                if [ ! -f "${KAPI_PUBS_SECRET_KEY_FILE}" ]; then
                    print_debug "KAPI: No PUBS API Secret Key File - Generating"
                    mkdir -p $(dirname ${KAPI_PUBS_SECRET_KEY_FILE})
                    silent openssl rand -out ${KAPI_PUBS_SECRET_KEY_FILE} -hex 64
                fi

                if [ -n "${KAPI_PLUGINS}" ] ; then
                    kapi_plugins=$(cat<<EOF
plugins = ${KAPI_PLUGINS}
EOF
                    )
                fi

                truefalse_yesno KAPI_DISABLE_TLS_VALIDATION
                cat <<EOF > ${CONFIG_PATH}${KAPI_CONFIG_FILE}
# Custom Generated Kopano KAPI Server Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(date)

insecure = ${KAPI_DISABLE_TLS_VALIDATION}
listen = ${KAPI_LISTEN_HOST}:${KAPI_LISTEN_PORT}
log_level = ${kapi_log_level}
oidc_issuer_identifier = ${SERVER_OIDC_IDENTIFIER}
plugin_grapi_socket_path = ${SOCKET_GRAPI}
plugin_kvs_db_datasource = ${kapi_kvs_db_dsn}
plugin_kvs_db_drivername = ${kapi_kvs_db_driver}
plugin_kvs_db_migrations = ${KAPI_KVS_PATH_DB_MIGRATIONS}
plugin_pubs_secret_key = ${KAPI_PUBS_SECRET_KEY_FILE}
plugins_path = ${KAPI_PATH_PLUGINS}
${kapi_plugins}
EOF
                else
                    print_info "KAPI: Skipping Auto Configuration"
                fi
            kapi_configured=TRUE
        fi
    fi
}

configure_kdav() {
    if var_true $ENABLE_KDAV ; then
        mkdir -p ${KDAV_PATH}
        chown -R nginx:www-data ${KDAV_PATH}
        if [ "${LOG_TYPE}" = "FILE" ] || [ "${LOG_TYPE}" = "FILE" ] && [ "${LOG_FILE_KDAV}" != "/dev/null" ] ; then
            touch ${LOG_PATH_KOPANO}${LOG_FILE_KDAV}
            chown -R ${NGINX_USER}:${NGINX_GROUP} ${LOG_PATH_KOPANO}${LOG_FILE_KDAV}
        fi
        if [ "${LOG_FILE_KDAV}" = "/dev/null" ] ; then
            sed -i "s|/var/log/kdav/kdav.log|${LOG_FILE_KDAV}|g" /usr/share/kdav/log4php.xml
        else
            sed -i "s|/var/log/kdav/kdav.log|${LOG_PATH_KOPANO}${LOG_FILE_KDAV}|g" /usr/share/kdav/log4php.xml
        fi
        sed -i "s|level value=\"TRACE\"|level value=\"${kdav_log_level}\"|g" /usr/share/kdav/log4php.xml
        
        ### Configure Nginx
        if [ "${KDAV_HOSTNAME}" = "${WEBAPP_HOSTNAME}" ] ; then
            sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/kdav-webapp.template;" /etc/nginx/conf.available/webapp.template   
        else
            sed -i "s|<KDAV_HOSTNAME>|${KDAV_HOSTNAME}|g" /etc/nginx/conf.available/kdav.template
            ln -s /etc/nginx/conf.available/kdav.template /etc/nginx/conf.d/kdav.conf
        fi
        sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/conf.available/kdav.template
        sed -i "s|<WEBROOT>|/usr/share/kdav|g" /etc/nginx/conf.available/kdav.template
        sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/kdav.template
        sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/kdav.template
        ln -sf /etc/nginx/conf.available/kdav.template /etc/nginx/conf.d/kdav.conf
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "KDAV: Auto Configuring"
            rm -rf /usr/share/kdav/config.php
            ln -sf ${CONFIG_PATH}${KDAV_CONFIG_FILE} /usr/share/kdav/config.php
            cat <<EOF > ${CONFIG_PATH}${KDAV_CONFIG_FILE}
<?php
// Custom Generated KDav Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('MAPI_SERVER', '${KDAV_SOCKET_SERVER}');
define('SABRE_AUTH_REALM', '${KDAV_REALM}');
define('DAV_ROOT_URI', '${KDAV_ROOT_URI}');
define('SYNC_DB', 'sqlite:${KDAV_PATH}${KDAV_SYNC_DB}');
define('MAX_SYNC_ITEMS', ${KDAV_MAX_SYNC_ITEMS});
define('DEVELOPER_MODE', ${KDAV_DEVELOPER_MODE});
EOF
        else
            print_info "KDAV: Skipping Auto Configuration"
        fi
    fi
}


configure_konnect() {
    if var_true $ENABLE_KONNECT ; then
        if var_true $konnect_configured ; then
            :
        else
            if [ "$SETUP_TYPE" = "AUTO" ]; then
                print_notice "Konnect: Auto Configuring"
                
                mkdir -p ${KONNECT_VALIDATION_KEYS_PATH}

                if [ "${KONNECT_LISTEN_HOST}" = "0.0.0.0" ] ; then KONNECT_HOST="127.0.0.1" ; fi;                
                sed -i "s|<KONNECT_HOST>|${KONNECT_HOST}|g" /etc/nginx/conf.available/upstream-konnect.template
                sed -i "s|<KONNECT_PORT>|${KONNECT_PORT}|g" /etc/nginx/conf.available/upstream-konnect.template
                ln -sf /etc/nginx/conf.available/upstream-konnect.template /etc/nginx/conf.d/upstream-konnect.conf

                if [ "${KONNECT_HOST}" != "127.0.0.1" ] || [ "${KONNECT_HOST}" != "localhost" ] ; then
                    print_debug "Konnect: Host is not localhost"
                    if var_true $KONNECT_HOST_SECURE ; then
                        print_debug "Konnect: Changing to use HTTPS"
                        sed -i "s|proxy_pass http://konnect/|proxy_pass https://konnect/|g" /etc/nginx/confd.available/calendar.template
                        sed -i "s|proxy_pass http://konnect/|proxy_pass https://konnect/|g" /etc/nginx/confd.available/meet.template
                    fi
                fi

                case "$KONNECT_BACKEND" in
                    "KC" | "kc" | "KOPANO" | "kopano" )
                        konnect_backend="kc"
                    ;;
                    "LDAP" | "ldap" )
                        konnect_backend="ldap"
                    ;;
                esac

                if [ ! -f "${KONNECT_SIGNING_KEY_FILE}" ]; then
                    print_debug "Konnect: No Signing Key File - Generating"
                    mkdir -p $(dirname ${KONNECT_SIGNING_KEY_FILE})
                    silent openssl genpkey   -algorithm RSA \
                                             -out ${KONNECT_SIGNING_KEY_FILE} \
                                             -pkeyopt rsa_keygen_bits:4096
                    silent openssl genpkey -algorithm RSA -out "${KONNECT_SIGNING_KEY_FILE}" -pkeyopt rsa_keygen_bits:4096 -pkeyopt rsa_keygen_pubexp:65537
                fi

                if [ ! -f "${KONNECT_SIGNING_SECRET_FILE}" ]; then
                    print_debug "Konnect: No Signing Encryption Secret Key File - Generating"
                    mkdir -p $(dirname ${KONNECT_SIGNING_SECRET_FILE})
                    silent openssl rand -out ${KONNECT_SIGNING_SECRET_FILE} 32
                fi

                if [ -f ${CONFIG_PATH}${KONNECT_CONFIG_FILE_IDENTIFIER_REGISTRATION} ] ; then
                    konnect_registration_identifier_conf=$(cat<<EOF
identifier_registration_conf = ${CONFIG_PATH}${KONNECT_CONFIG_FILE_IDENTIFIER_REGISTRATION}
EOF
                    )
                fi

                if [ -n "${KONNECT_SIGNING_KID}" ] ; then
                    konnect_signing_kid=$(cat<<EOF
signing_kid = ${KONNECT_SIGNING_KID}
EOF
                    )
                fi

                if [ -n "${KONNECT_ALLOWED_SCOPES}" ] ; then
                    konnect_allowed_scopes=$(cat<<EOF
allowed_scopes = ${KONNECT_ALLOWED_SCOPES}
EOF
                    )
                fi

                if [ -n "${KONNECT_TRUSTED_PROXIES}" ] ; then
                    konnect_trusted_proxies=$(cat<<EOF
trusted_proxies = ${KONNECT_TRUSTED_PROXIES}
EOF
                    )
                fi

                truefalse_yesno KONNECT_DISABLE_TLS_VALIDATION
                truefalse_yesno KONNECT_ENABLE_CLIENT_DYNAMIC_REGISTRATION
                truefalse_yesno KONNECT_ENABLE_CLIENT_GUESTS

                cat <<EOF > ${CONFIG_PATH}${KONNECT_CONFIG_FILE}            
# Custom Generated Konnect Server Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(date)

allow_client_guests = ${KONNECT_ENABLE_CLIENT_GUESTS}
allow_dynamic_client_registration = ${KONNECT_ENABLE_CLIENT_DYNAMIC_REGISTRATION}
encryption_secret_key = ${KONNECT_SIGNING_SECRET_FILE}
identifier_scopes_conf = ${CONFIG_PATH}${KONNECT_CONFIG_FILE_IDENTIFIER_SCOPES}
identity_manager = ${konnect_backend}
identity_manager_args = ${KONNECT_IDENTITY_MANAGER_ARGUMENTS}
insecure = ${KONNECT_DISABLE_TLS_VALIDATION}
kc_server_uri = ${KONNECT_SOCKET_SERVER}
kc_session_timeout = ${KONNECT_TIMEOUT_SESSION_KOPANO}
ldap_basedn = ${LDAP_BASE_DN}
ldap_binddn = ${LDAP_BIND_DN}
ldap_bindpw = ${LDAP_BIND_PASS}
ldap_filter = ${LDAP_FILTER_KONNECT}
ldap_login_attribute = ${LDAP_ATTRIBUTE_LOGINNAME}
ldap_scope = ${LDAP_SCOPE}
ldap_uri = ${LDAP_URI}
ldap_uuid_attribute = ${LDAP_ATTRIBUTE_USER_UNIQUE}
listen = ${KONNECT_LISTEN_HOST}:${KONNECT_LISTEN_PORT}
log_level = ${konnect_log_level}
oidc_issuer_identifier = https://${KONNECT_HOSTNAME}
signing_method = ${KONNECT_JWT_METHOD}
signing_private_key = ${KONNECT_SIGNING_KEY_FILE}
validation_keys_path = ${KONNECT_VALIDATION_KEYS_PATH}
web_resources_path = ${KONNECT_WEBROOT}
${konnect_allowed_scopes}
${konnect_registration_identifier_conf}
${konnect_signing_kid}
${konnect_trusted_proxies}

EOF
            else
                print_info "Konnect: Skipping Auto Configuration"
            fi
            
            kapi_configured=TRUE
        fi
    fi
}

configure_kwm() {
    if var_true $ENABLE_KWM ; then
        if var_true $kwm_configured ; then
            :
        else
            if [ -v SERVER_OIDC_IDENTIFIER ]; then
                print_notice "KWM: Auto Configuring"
                if [ "${KWM_LISTEN_HOST}" = "0.0.0.0" ] ; then KWM_HOST="127.0.0.1"; fi;
                sed -i "s|<KWM_HOST>|${KWM_HOST}|g" /etc/nginx/conf.available/upstream-kwmserver.template
                sed -i "s|<KWM_PORT>|${KWM_PORT}|g" /etc/nginx/conf.available/upstream-kwmserver.template
                ln -sf /etc/nginx/conf.available/upstream-kwmserver.template /etc/nginx/conf.d/upstream-kwmserver.conf
                if [ "${KWM_HOST}" != "127.0.0.1" ] || [ "${KWM_HOST}" != "localhost" ] ; then
                    print_debug "KWM: Host is not localhost"
                    if var_true $KWM_HOST_SECURE ; then
                        print_debug "KWM: Changing to use HTTPS"
                        sed -i "s|proxy_pass http://kwmserver/|proxy_pass https://kwmserver/|g" /etc/nginx/confd.available/calendar.template
                        sed -i "s|proxy_pass http://kwmserver/|proxy_pass https://kwmserver/|g" /etc/nginx/confd.available/meet.template
                    fi
                fi

                truefalse_yesno KWM_DISABLE_TLS_VALIDATION
                truefalse_yesno KWM_ENABLE_API_GUEST
                truefalse_yesno KWM_ENABLE_API_MCU
                truefalse_yesno KWM_ENABLE_API_RTM
                truefalse_yesno KWM_GUEST_ALLOW_JOIN_EMPTY

                if [ ! -f "${KWM_TOKENS_SECRET_KEY_FILE}" ]; then
                    print_debug "KWM: No Tokens Secret Key File - Generating"
                    mkdir -p $(dirname ${KWM_TOKENS_SECRET_KEY_FILE})
                    silent openssl rand -out ${KWM_TOKENS_SECRET_KEY_FILE} 32
                fi

                if [ -f ${CONFIG_PATH}${KWM_TURN_AUTH_SERVER_FILE} ] ; then
                    kwm_turn_service_credentials=$(cat<<EOF
turn_service_credentials = ${CONFIG_PATH}${KWM_TURN_AUTH_SERVER_FILE}
EOF
                    )
                fi

                if [ -f ${CONFIG_PATH}${KWM_TURN_AUTH_SECRET_FILE} ] ; then
                    kwm_turn_auth_secret=$(cat<<EOF
turn_server_shared_secret = ${KWM_TURN_AUTH_SECRET_FILE} 
EOF
                    )
                fi

                if [ -n "${KWM_REQUIRED_SCOPES}" ] ; then
                    kwm_required_scopes=$(cat<<EOF
rtm_required_scopes = ${KWM_RTM_REQUIRED_SCOPES}
EOF
                    )
                fi

                if [ -n "${KWM_TURN_URIS}" ] ; then
                    kwm_turn_uris=$(cat<<EOF
turn_uris = ${KWM_TURN_URIS}
EOF
                    )
                fi

                if [ -f ${CONFIG_PATH}${KWM_CONFIG_FILE_REGISTRATION} ] ; then
                    kwm_registration_conf=$(cat<<EOF
registration_conf = ${CONFIG_PATH}${KWM_CONFIG_FILE_REGISTRATION} 
EOF
                    )
                fi

                cat <<EOF > ${CONFIG_PATH}${KWM_CONFIG_FILE}
# Custom Generated Kopano KWM Server Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(date)

oidc_issuer_identifier = ${SERVER_OIDC_IDENTIFIER}
admin_tokens_secret_key = ${KWM_TOKENS_SECRET_KEY_FILE}
allow_guest_only_channels = ${KWM_GUEST_ALLOW_JOIN_EMPTY}
enable_guest_api = ${KWM_ENABLE_API_GUEST}
enable_mcu_api = ${KWM_ENABLE_API_MCU}
enable_rtm_api = ${KWM_ENABLE_API_RTM}
insecure = ${KWM_DISABLE_TLS_VALIDATION}
listen = ${KWM_LISTEN_HOST}:${KWM_LISTEN_PORT}
log_level = ${kwm_log_level}
public_guest_access_regexp = ${KWM_GUEST_PUBLIC_ACCESS_REGEXP}
turn_service_url = ${KWM_TURN_URL}
${kwm_turn_auth_secret}
${kwm_turn_service_credentials}
${kwm_turn_uris}
${kwm_required_scopes}
${krm_registration_conf}
EOF
            else
                print_info "KWM: Skipping Auto Configuration"
            fi
            kwm_configured=TRUE
        fi
    fi
}

configure_meet() {
    if var_true $ENABLE_MEET ; then
        print_notice "Meet: Enabled"
        sanity_var MEET_HOSTNAME "Meet Hostname"        
        
        ### Configure Nginx
        if [ "${MEET_HOSTNAME}" = "${WEBAPP_HOSTNAME}" ] ; then
            sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet.template;" /etc/nginx/conf.available/webapp.template  
        else
            sed -i "s|<MEET_HOSTNAME>|${MEET_HOSTNAME}|g" /etc/nginx/conf.available/meet.template
            ln -s /etc/nginx/conf.available/meet.template /etc/nginx/conf.d/meet.conf
        fi
        sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/conf.available/meet.template
        sed -i "s|<WEBROOT_MEET>|${MEET_WEBROOT}|g" /etc/nginx/conf.available/meet.template
        sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/meet.template
        sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/meet.template
        sed -i "s|<MEET_CONFIG>|${MEET_CONFIG_FILE}|g" /etc/nginx/conf.available/meet.template
        sed -i "s|<CONFIG_PATH>|${CONFIG_PATH}|g" /etc/nginx/conf.available/meet.template
        ln -sf /etc/nginx/conf.available/meet.template /etc/nginx/conf.d/meet.conf
        mkdir -p $(dirname ${CONFIG_PATH}${MEET_CONFIG_FILE})

        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Meet: Auto Configuring"
            cat <<EOF > ${CONFIG_PATH}${MEET_CONFIG_FILE}
{
  "apiPrefix": "/api/gc/v1",
  "disableFullGAB": "${MEET_DISABLE_FULL_GAB}",
  "guests": {
    "default": "${MEET_GUESTS_DEFAULT}",
    "enabled": "${MEET_ENABLE_GUESTS}"
  },
  "kwm": {
    "url": "${MEET_KWM_URL}"
  },
  "oidc": {
    "clientID": "${MEET_OIDC_CLIENT_ID}",
    "iss": "${MEET_OIDC_ISS}"
  },
  "apps": {
    "enabled": []
  }
}
EOF
            if [ -n "${MEET_EXTERNAL_APPS}" ]; then
                meet_external_apps_array=$(echo $MEET_EXTERNAL_APPS | tr "," "\n")
                lines=$(echo "${meet_external_apps_array}" | wc -l | awk '{print $1}')
                counter=1
                for app in $meet_external_apps_array
                    do
                    print_debug "Meet: Enabling External App - ${app}"
                    if [ "${counter}" -gt 1 ]; then
                        seperator=","
                    fi
                    external_apps_enabled="${external_apps_enabled}${seperator}\"${app}\""
                    let counter+=1
                    sed -i 's|"enabled": \[.*\]|"enabled": \['${external_apps_enabled}'\]|g' ${CONFIG_PATH}${MEET_CONFIG_FILE}
                    case "${app}" in
                        "kopano-webapp" )
                            sed -i "/## Includes/a \ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet-ext-webapp.template;" /etc/nginx/conf.available/meet.template
                            sed -i "s|<WEBAPP_EXT_HOSTNAME>|${MEET_EXTERNAL_WEBAPP_HOSTNAME}|g" /etc/nginx/conf.available/meet-ext-webapp.template
                        ;;
                        "kopano-mail" )
                            sed -i "/## Includes/a \ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet-ext-mail.template;" /etc/nginx/conf.available/meet.template
                            sed -i "s|<MAIL_EXT_HOSTNAME>|${MEET_EXTERNAL_MAIL_HOSTNAME}|g" /etc/nginx/conf.available/meet-ext-mail.template
                        ;;
                        "kopano-konnect" )
                            sed -i "/## Includes/a \ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet-ext-konnect.template;" /etc/nginx/conf.available/meet.template
                            sed -i "s|<KONNECT_EXT_HOSTNAME>|${MEET_EXTERNAL_KONNECT_HOSTNAME}|g" /etc/nginx/conf.available/meet-ext-konnect.template                        
                        ;;
                        "kopano-contacts" )
                            sed -i "/## Includes/a \ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet-ext-contacts.template;" /etc/nginx/conf.available/meet.template
                            sed -i "s|<CONTACTS_EXT_HOSTNAME>|${MEET_EXTERNAL_CONTACTS_HOSTNAME}|g" /etc/nginx/conf.available/meet-ext-contacts.template
                        ;;
                        "kopano-calendar" )
                            sed -i "/## Includes/a \ \ \ \ \ \ include \/etc\/nginx\/conf.available\/meet-ext-calendar.template;" /etc/nginx/conf.available/meet.template
                            sed -i "s|<CALENDAR_EXT_HOSTNAME>|${MEET_EXTERNAL_CALENDAR_HOSTNAME}|g" /etc/nginx/conf.available/meet-ext-calendar.template
                        ;;
                    esac
                done    
            fi
        else
            print_info "Meet: Skipping Auto Configuration"
        fi

        
        configure_grapi
        configure_kapi
        configure_kwm
        configure_konnect
    fi
}


configure_monitor() {
    if var_true $ENABLE_MONITOR ; then
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Monitor: Auto Configuring"
            if [[ $SOCKET_SERVER == *"https://"* ]]; then
                certificates ${MONITOR_SSL_KEY_FILE}
                monitor_sslkey=$(cat <<EOF
sslkey_file = ${MONITOR_SSL_KEY_FILE}
EOF
                            )
                if [ -v MONITOR_SSL_KEY_PASS ]; then
                    monitor_sslkey=$(echo "${monitor_sslkey}" ; cat<<EOF
ssl_key_pass = ${MONITOR_SSL_KEY_PASS}
EOF
                    )
                fi
            fi
            cat <<EOF > ${CONFIG_PATH}monitor.cfg
# Custom Generated Kopano Monitor Configuration! Do not edit, instead set ENV Vars
# If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
# Last Generated on $(date)

server_socket = ${MONITOR_SOCKET_SERVER}
${monitor_sslkey}
coredump_enabled = ${ENABLE_COREDUMPS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_MONITOR}
log_timestamp = ${LOG_TIMESTAMPS}
quota_check_interval = ${MONITOR_QUOTA_CHECK_INTERVAL}
mailquota_resend_interval = ${MONITOR_QUOTA_RESEND_INTERVAL} 
userquota_warning_template = ${TEMPLATE_MONITOR_PATH}${TEMPLATE_MONITOR_COMPANY_QUOTA}
companyquota_warning_template = ${TEMPLATE_MONITOR_PATH}${TEMPLATE_MONITOR_COMPANY_QUOTA}
EOF
        else
            print_info "Monitor: Skipping Auto Configuration"
        fi
    fi
}

configure_search() {
    if var_true $ENABLE_GATEWAY ; then
        certificates ${SEARCH_SSL_CERT_FILE}
        certificates ${SEARCH_SSL_LISTEN_CERT_FILE}
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Configuring Search"
            if [[ $SOCKET_SERVER == *"https://"* ]]; then
                search_sslkey=$(cat <<EOF
sslkey_file = ${SEARCH_SSL_KEY_FILE}
EOF
                            )
                if [ -v SEARCH_SSL_KEY_PASS ]; then
                    search_sslkey=$(echo "${search_sslkey}" ; cat<<EOF
sslkey_pass = ${SEARCH_SSL_KEY_PASS}
EOF
                    )
                fi
            fi

            if [[ $SOCKET_SEARCH == *"https://"* ]]; then
                search_socket_sslkey=$(cat <<EOF
ssl_private_key_file = ${SEARCH_SSL_LISTEN_KEY_FILE}
ssl_certificate_file = ${SEARCH_SSL_LISTEN_CERT_FILE}
EOF
            )
            fi

            mkdir -p ${SEARCH_INDEX_PATH}
            chown -R kopano: ${SEARCH_INDEX_PATH}
            truefalse_yesno SEARCH_INDEX_ATTACHMENTS
            truefalse_yesno SEARCH_INDEX_DRAFTS
            truefalse_yesno SEARCH_INDEX_JUNK
            truefalse_yesno SEARCH_SUGGESTIONS
            cat <<EOF > ${CONFIG_PATH}search.cfg
## Custom Generated Kopano Search Indexer Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_socket = ${SEARCH_SOCKET_SERVER}
${search_sslkey}
server_bind_name = ${SOCKET_SEARCH_LISTEN}
${search_socket_sslkey}
index_path = ${SEARCH_INDEX_PATH}
limit_results = ${SEARCH_LIMIT_RESULTS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_SEARCH}
log_timestamp = ${LOG_TIMESTAMPS}
term_cache_size = ${SEARCH_CACHE_SIZE_TERM}
index_processes = ${SEARCH_INDEX_PROCESSES}
index_drafts = ${SEARCH_INDEX_DRAFTS}
index_junk = ${SEARCH_INDEX_JUNK}
suggestions = ${SEARCH_SUGGESTIONS}
index_attachments = ${SEARCH_INDEX_ATTACHMENTS}
index_attachment_max_size = ${SEARCH_INDEX_ATTACHMENTS_MAX_SIZE}
EOF
        else
            print_info "Search: Skipping Auto Configuration"
        fi
    fi
}

configure_server() {
    if var_true $ENABLE_SERVER ; then
        touch ${CONFIG_PATH}admin.cfg
        if [ "$SETUP_TYPE" = "AUTO" ]; then
        ### Server
            print_notice "Configuring Kopano Server"
            if var_true $SERVER_ENABLE_HTTP ; then
                print_notice "Server: Enabling HTTP Soap Endpoint"
                server_http="server_listen = ${SERVER_LISTEN_HOST}:${SERVER_LISTEN_PORT}"
            fi

            if var_true $SERVER_ENABLE_HTTPS ; then
                print_notice "Server: Enabling HTTPS Soap Endpoint"
                certificates ${SERVER_SSL_KEY_FILE}
                certificates ${CA_CERT_FILE}
                server_https=$(cat <<EOF
server_listen_tls = ${SERVER_LISTEN_HOST}:${SERVER_LISTEN_PORT_SECURE}
server_ssl_key_file = ${SERVER_SSL_KEY_FILE}
server_ssl_ca_file = ${CA_CERT_FILE}
server_tls_min_proto = ${SERVER_TLS_MIN_PROTOCOL}
sslkeys_path = ${SERVER_SSL_PUBLIC_PATH}
EOF
                            )

                if [ -v SERVER_SSL_KEY_PASS ]; then
                    server_https=$(echo "${server_https}" ; cat<<EOF
server_ssl_key_pass = ${SERVER_SSL_KEY_PASS}
EOF
                    )
                fi
            fi


            if [ -v SERVER_OIDC_IDENTIFIER ]; then
                truefalse_yesno SERVER_OIDC_DISABLE_TLS_VALIDATION
                server_oidc=$(cat<<EOF
kcoidc_issuer_identifier=${SERVER_OIDC_IDENTIFIER}
kcoidc_insecure_skip_verify=${SERVER_OIDC_DISABLE_TLS_VALIDATION}
kcoidc_initialize_timeout=${SERVER_OIDC_TIMEOUT_INITIALIZE}
EOF
                    )
            fi

            
            truefalse_yesno SERVER_ALLOW_LOCAL_USERS
            truefalse_yesno SERVER_ATTACHMENT_BACKEND_FILES_FSYNC
            truefalse_yesno SERVER_ENABLE_GAB
            truefalse_yesno SERVER_ENABLE_MULTI_TENANT
            truefalse_yesno SERVER_ENABLE_OPTIMIZED_SQL
            truefalse_yesno SERVER_ENABLE_SEARCH
            truefalse_yesno SERVER_ENABLE_SSO
            truefalse_yesno SERVER_GAB_HIDE_EVERYONE
            truefalse_yesno SERVER_GAB_HIDE_SYSTEM
            truefalse_yesno SERVER_GAB_SYNC_REALTIME
            truefalse_yesno SERVER_USER_SAFE_MODE

            case "${SERVER_ATTACHMENT_BACKEND}" in
                "FILES" | "files" | "FILES_V2" | "files_v2" )
                    print_debug "Selecting Files as Attachment Storage Backend"
                    mkdir -p ${SERVER_ATTACHMENT_BACKEND_FILES_PATH}
                    chown -R kopano: ${SERVER_ATTACHMENT_BACKEND_FILES_PATH}
                    server_attachment=$(cat <<EOF
attachment_path = ${SERVER_ATTACHMENT_BACKEND_FILES_PATH}
EOF
                        )
                ;;
                "S3" | "s3" | "minio" )
                    print_debug "Selecting S3 as Attachment Storage Backend"
                    sanity_var SERVER_ATTACHMENT_BACKEND_S3_HOST "S3/Minio Host"
                    SERVER_ATTACHMENT_BACKEND="s3"
                    server_attachment=$(cat <<EOF
attachment_path = ${SERVER_ATTACHMENT_BACKEND_S3_PATH}
attachment_s3_hostname = ${SERVER_ATTACHMENT_BACKEND_S3_HOST}
attachment_s3_region = ${SERVER_ATTACHMENT_BACKEND_S3_REGION}
attachment_s3_protocol = ${SERVER_ATTACHMENT_BACKEND_S3_PROTOCOL}
attachment_s3_uristyle = ${SERVER_ATTACHMENT_BACKEND_S3_URI_STYLE}
attachment_s3_accesskeyid = ${SERVER_ATTACHMENT_BACKEND_S3_ACCESS_ID}
attachment_s3_secretaccesskey = ${SERVER_ATTACHMENT_BACKEND_S3_ACCESS_KEY}
attachment_s3_bucketname = ${SERVER_ATTACHMENT_BACKEND_S3_BUCKET}
EOF
                        )
                ;;
            esac

            cat <<EOF > ${CONFIG_PATH}server.cfg
## Custom Generated Kopano Server Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_pipe_name = ${SERVER_PIPE_NAME}
server_pipe_priority = ${SERVER_PIPE_PRIORITY_NAME}
${server_http}
${server_https}

server_name = ${SERVER_SERVER_NAME}
enable_distributed_kopano = ${SERVER_ENABLE_MULTI_TENANT}

database_engine = mysql
mysql_host = ${DB_HOST}
mysql_port = ${DB_PORT}
mysql_user = ${DB_USER}
mysql_password = ${DB_PASS}
mysql_database = ${DB_NAME}
enable_sql_procedures = ${SERVER_ENABLE_OPTIMIZED_SQL}

coredump_enabled = ${ENABLE_COREDUMPS}
threads = ${SERVER_THREADS}
watchdog_frequency = ${SERVER_WATCHDOG_FREQUENCY}
watchdog_max_age = ${SERVER_WATCHDOG_MAX_AGE}
server_recv_timeout = ${SERVER_TIMEOUT_RECIEVE}
server_send_timeout = ${SERVER_TIMEOUT_SEND}

allow_local_users = ${SERVER_ALLOW_LOCAL_USERS}
local_admin_users = ${SERVER_LOCAL_ADMIN_USERS}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_SERVER}
log_level = ${LOG_LEVEL}
log_timestamp = ${LOG_TIMESTAMPS}
attachment_storage = ${SERVER_ATTACHMENT_BACKEND}
${server_attachment}
user_plugin = ${SERVER_USER_PLUGIN}
user_plugin_config = ${CONFIG_PATH}ldap.cfg
enable_sso = ${SERVER_ENABLE_SSO}
server_hostname = ${SERVER_HOSTNAME}

${server_oidc}

quota_warn = ${SERVER_QUOTA_WARN}
quota_soft = ${SERVER_QUOTA_SOFT}
quota_hard = ${SERVER_QUOTA_HARD}
companyquota_warn = ${SERVER_QUOTA_COMPANY_WARN}

createuser_script = ${SERVER_SCRIPT_CREATEUSER}
deleteuser_script = ${SERVER_SCRIPT_DELETEUSER}
creategroup_script = ${SERVER_SCRIPT_CREATEGROUP}
deletegroup_script = ${SERVER_SCRIPT_DELETEGROUP}
createcompany_script = ${SERVER_SCRIPT_CREATECOMPANY}
deletecompany_script = ${SERVER_SCRIPT_DELETECOMPANY}

system_email_address = ${SERVER_SYSTEM_EMAIL_ADDRESS}
user_safe_mode = ${SERVER_USER_SAFE_MODE}
enable_hosted_kopano = ${SERVER_ENABLE_MULTI_TENANT}
storename_format = ${SERVER_MULTI_TENANT_STORENAME_FORMAT}
loginname_format = ${SERVER_MULTI_TENANT_LOGINNAME_FORMAT}
enable_gab = ${SERVER_ENABLE_GAB}
hide_everyone = ${SERVER_GAB_HIDE_EVERYONE}
hide_system = ${SERVER_GAB_HIDE_SYSTEM}
sync_gab_realtime = ${SERVER_GAB_SYNC_REALTIME}
search_enabled = ${SERVER_ENABLE_SEARCH}
search_socket = ${SOCKET_SEARCH}
search_timeout = ${SEARCH_TIMEOUT}
disabled_features = ${SERVER_DISABLED_FEATURES}
EOF
        else
            print_info "Server: Skipping Auto Configuration"
        fi
    fi
}

configure_spamd() {
    if var_true $ENABLE_SPAMD ; then
        mkdir -p ${SPAMD_FILES_SPAM_PATH} ${SPAMD_FILES_HAM_PATH}
        chown -R kopano: ${SPAMD_FILES_SPAM_PATH} ${SPAMD_FILES_HAM_PATH}
        chmod -R ug+rwX ${SPAMD_FILES_HAM_PATH} ${SPAMD_FILES_HAM_PATH}
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "SpamD: Auto Configuring"
            if [[ $SOCKET_SERVER == *"https://"* ]]; then
                certificates ${SPAMD_SSL_KEY_FILE}
                spamd_sslkey=$(cat <<EOF
sslkey_file = ${SPAMD_SSL_KEY_FILE}
EOF
                            )
                if [ -v SPAMD_SSL_KEY_PASS ]; then
                    spamd_sslkey=$(echo "${spamd_sslkey}" ; cat<<EOF
sslkey_pass = ${SPAMD_SSL_KEY_PASS}
EOF
                    )
                fi
            fi
            cat <<EOF > ${CONFIG_PATH}spamd.cfg
## Custom Generated Kopano SpamD Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

server_socket = ${SPAMD_SOCKET_SERVER}
${spamd_sslkey}

run_as_user         = kopano
run_as_group        = kopano
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_SPAMD}
log_timestamp = ${LOG_TIMESTAMPS}
sa_group            = ${SPAMD_SA_GROUP}
header_tag          = ${DAGENT_SPAM_HEADER_NAME}
ham_dir            = ${SPAMD_FILES_HAM_PATH}
spam_dir            = ${SPAMD_FILES_SPAM_PATH}
EOF
        else
            print_info "SpamD: Skipping Auto Configuration"
        fi
    fi
}

configure_spooler() {
    if var_true $ENABLE_SPOOLER ; then
        if var_true $SPOOLER_PLUGIN_ENABLED ; then 
            mkdir -p ${SPOOLER_PATH_PLUGIN}
            chown -R kopano: ${SPOOLER_PATH_PLUGIN} 
        fi
        
        if var_true $SPOOLER_LOG_RAW_MESSAGE_STAGE1 ; then 
            mkdir -p ${SPOOLER_PATH_RAW_MESSAGES}
            chown -R kopano: ${SPOOLER_PATH_RAW_MESSAGES}
        fi

        truefalse_yesno SPOOLER_PLUGIN_ENABLED
        truefalse_yesno SPOOLER_LOG_RAW_MESSAGE_STAGE1
        truefalse_yesno SPOOLER_ENABLE_DSN
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Spooler: Auto Configuring"

            if [[ $SOCKET_SERVER == *"https://"* ]]; then

                certificates ${SPOOLER_SSL_KEY_FILE}
                spooler_sslkey=$(cat <<EOF
sslkey_file = ${SPOOLER_SSL_KEY_FILE}
EOF
                            )
                if [ -v SERVER_SSL_KEY_PASS ]; then
                    spooler_sslkey=$(echo "${spooler_sslkey}" ; cat<<EOF
ssl_key_pass = ${SERVER_SSL_KEY_PASS}
EOF
                    )
                fi
            fi
            cat <<EOF > ${CONFIG_PATH}spooler.cfg
## Custom Generated Kopano Spooler Configuration! Do not edit, instead set ENV Vars
## If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
## Last Generated on $(date)

smtp_server = ${SPOOLER_SMTP_HOST}
smtp_port = ${SPOOLER_SMTP_PORT}
server_socket = ${SPOOLER_SOCKET_SERVER}
${spooler_sslkey}
coredump_enabled = ${ENABLE_COREDUMPS}
log_level = ${LOG_LEVEL}
log_file = ${LOG_PATH_KOPANO}${LOG_FILE_SPOOLER}
log_timestamp = ${LOG_TIMESTAMPS}
log_raw_message_path = ${SPOOLER_PATH_RAW_MESSAGES}
log_raw_message_stage1 = ${SPOOLER_LOG_RAW_MESSAGE_STAGE1}
max_threads = ${SPOOLER_MAX_THREADS}
plugin_enabled = ${SPOOLER_PLUGIN_ENABLED}
plugin_path = ${SPOOLER_PATH_PLUGIN}
enable_dsn = ${SPOOLER_ENABLE_DSN}
EOF
        else
            print_info "Skipping Spooler Configuration"
        fi
    fi
}

configure_user_backend() {
    case "${SERVER_USER_PLUGIN}" in
                "LDAP" | "ldap" )
                    print_info "Setting LDAP for User Backend"
                    configure_ldap
                    configure_cron_ldap_sync
                ;;
                "DB" | "db" )
                    print_info "Setting MariaDB for User Backend"
                ;;
                *)
                    print_error "SERVER_USER_PLUGIN value ${SERVER_USER_PLUGIN} not recognized. Exiting.."
                    exit 1
                ;;
    esac
}

configure_webapp() {
    if var_true $ENABLE_WEBAPP ; then
        print_debug "Webapp: Enabled"
        mkdir -p ${CONFIG_PATH}webapp/
        mkdir -p ${LOG_PATH_WEBAPP}
        chown -R ${NGINX_USER}:${NGINX_GROUP} ${LOG_PATH_WEBAPP}
        mkdir -p ${WEBAPP_TMP_PATH}
        chown -R ${NGINX_USER}:${NGINX_GROUP} ${WEBAPP_TMP_PATH}
        ### Nginx
        sed -i "s|<WEBAPP_HOSTNAME>|${WEBAPP_HOSTNAME}|g" /etc/nginx/conf.available/webapp.template
        sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/conf.available/webapp.template
        sed -i "s|<WEBROOT>|/usr/share/kopano-webapp|g" /etc/nginx/conf.available/webapp.template
        sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/webapp.template
        sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/webapp.template
        case "$NGINX_AUTHENTICATION_TYPE" in
          "LLNG")
              sed -i "s#<LLNG_HANDLER_HOST>#$NGINX_AUTHENTICATION_LLNG_HANDLER_HOST#g" /etc/nginx/nginx.conf.d/authentication/llng
              sed -i "s#<LLNG_HANDLER_PORT>#$NGINX_AUTHENTICATION_LLNG_HANDLER_PORT#g" /etc/nginx/nginx.conf.d/authentication/llng
              print_notice "Setting LLNG Authentication"

              header_num=$(printenv | sort | grep '\NGINX_AUTHENTICATION_LLNG_ATTRIBUTE.*' | wc -l)
                for (( i = 1; i <= $header_num; i++ ))
                    do
                      headers=NGINX_AUTHENTICATION_LLNG_ATTRIBUTE${i}
                      IFS=',' read -r -a array <<< "${!headers}"

                      print_notice "Updating Nginx to support recieving attribute from LLNG: '${array[0]}'"

                      echo "fastcgi_param ${array[0]} \$${array[1]};" >> /etc/nginx/nginx.conf.d/authentication/llng_params
                      echo "auth_request_set \$${array[1]} \$${array[2]};" >> /etc/nginx/nginx.conf.d/authentication/llng_auth_request
                done

              sed -i '/server {/a\ \ \ \ \  include /etc/nginx/nginx.conf.d/authentication/llng;' /etc/nginx/conf.available/webapp.template
              sed -i '/server {/a\ \ \ \ \  ### LLNG Authentication handler' /etc/nginx/conf.available/webapp.template
              sed -i '/location \/ {/a\ \ \ \ \ \ \ \ include /etc/nginx/nginx.conf.d/authentication/llng_auth_request;' /etc/nginx/conf.available/webapp.template
              sed -i '/location \/ {/a\ \ \ \ \ \ \ \ ### LLNG Authentication handler' /etc/nginx/conf.available/webapp.template
              sed -i '/ fastcgi_index/a\ \ \ \ \ \ \ \ \ \ include \/etc\/nginx\/nginx.conf.d\/authentication\/llng_auth_request;' /etc/nginx/conf.available/webapp.template
              sed -i '/ fastcgi_index/a\ \ \ \ \ \ \ \ \ \ include \/etc\/nginx\/nginx.conf.d\/authentication\/llng_params;' /etc/nginx/conf.available/webapp.template
              sed -i '/ fastcgi_index/a\ \ \ \ \ \ \ \ \ \ ### LLNG Authentication handler' /etc/nginx/conf.available/webapp.template
              ;;
          "NONE")
            :
          ;;
         *)
            print_warn "Unknown AUTHENTICATION_TYPE option. Relying on Application Authentication"
         ;;
        esac
 
        if var_true $WEBAPP_ENABLE_REMOTE_PASSWORD ; then
            print_debug "Webapp: Enabling Remote Password HTTP Header Support" 
            sed -i "s|WebAppAuthentication::login(\$username, '');|WebAppAuthentication::login(\$username, \$_SERVER['REMOTE_PASSWORD']);|g" /usr/share/kopano-webapp/server/includes/core/class.webappauthentication.php 
        fi

        ln -s /etc/nginx/conf.available/webapp.template /etc/nginx/conf.d/webapp.conf

        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Webapp: AutoConfiguring"
            webapp_disabled_plugins_array=$(echo $WEBAPP_PLUGINS_DISABLED | tr "," "\n")
            counter=1
            for plugin in $webapp_disabled_plugins_array
                do
                if [ "$counter" -gt "1" ]; then
                    seperator=";"
                fi
                webapp_disabled_plugins=${webapp_disabled_plugins}${seperator}${plugin}
                let counter+=1
            done    

            webapp_always_enabled_array=$(echo $WEBAPP_PLUGINS_ENABLED_ALWAYS | tr "," "\n")
            counter=1
            for plugin in $webapp_enabled_plugins_array
                do
                if [ "$counter" -gt "1" ]; then
                    seperator=";"
                fi
                webapp_always_enabled_plugins=${webapp_always_enabled_plugins}${seperator}${plugin}
                let counter+=1
            done    

            cat <<EOF > ${CONFIG_PATH}webapp/config.php
<?php
// Custom Generated Kopano Webapp Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

    define("CONFIG_CHECK", ${WEBAPP_CONFIG_CHECK});
    define("CONFIG_CHECK_COOKIES_HTTP", ${WEBAPP_CONFIG_CHECK_COOKIES_HTTP});
    define("CONFIG_CHECK_COOKIES_SSL", ${WEBAPP_CONFIG_CHECK_COOKIES_SSL});
    define("DEFAULT_SERVER", "${WEBAPP_SOCKET_SERVER}");
    define("SSLCERT_FILE", NULL); // Needs Work
    define("SSLCERT_PASS", NULL); // Needs Work
    define("DISABLE_REMOTE_USER_LOGIN", ${WEBAPP_DISABLE_REMOTE_USER_LOGIN});
    define("OIDC_ISS", "${WEBAPP_OIDC_ISS}");
    define("OIDC_CLIENT_ID", "${WEBAPP_OIDC_CLIENT_ID}");
    define("OIDC_SCOPE", "${WEBAPP_OIDC_SCOPE}");
    define("LOGINNAME_STRIP_DOMAIN", ${WEBAPP_LOGINNAME_STRIP_DOMAIN});
    define("COOKIE_NAME", "${WEBAPP_COOKIE_NAME}");
    define("INSECURE_COOKIES", ${WEBAPP_INSECURE_COOKIES});
    define("ENABLE_DOMPURIFY_FILTER", ${WEBAPP_ENABLE_DOMPURIFY_FILTER});
    define("CLIENT_TIMEOUT", ${WEBAPP_CLIENT_TIMEOUT});
    define("CROSS_DOMAIN_AUTHENTICATION_ALLOWED_DOMAINS", "${WEBAPP_CROSS_DOMAIN_AUTHENTICATION_ALLOWED_DOMAINS}");
    define("REDIRECT_ALLOWED_DOMAINS", "${WEBAPP_REDIRECT_ALLOWED_DOMAINS}");
    \$base_url = dirname(\$_SERVER["PHP_SELF"]);
    if(substr(\$base_url,-1)!="/") \$base_url .="/";
    define("BASE_URL", \$base_url);
    define("TMP_PATH", "${WEBAPP_TMP_PATH}");
    define("PATH_PLUGIN_DIR", "plugins");
    define("ENABLE_PLUGINS", "${WEBAPP_ENABLE_PLUGINS}");
    define("DISABLED_PLUGINS_LIST", "${webapp_disabled_plugins}");
    define("ALWAYS_ENABLED_PLUGINS_LIST", "${webapp_always_enabled_plugins}");
    define("THEME", "${WEBAPP_THEME}");
    define("ICONSET", "${WEBAPP_ICONSET}");
    define("WEBAPP_TITLE", "${WEBAPP_TITLE}");
    define("DISABLE_FULL_GAB", ${WEBAPP_DISABLE_FULL_GAB});
    define("MAX_GAB_RESULTS", ${WEBAPP_MAX_GAB_RESULTS});
    define("DISABLE_PUBLIC_CONTACT_FOLDERS", ${WEBAPP_DISABLE_PUBLIC_CONTACT_FOLDERS});
    define("ENABLE_PUBLIC_FOLDERS", ${WEBAPP_ENABLE_PUBLIC_FOLDERS});
    define("DISABLE_SHARED_CONTACT_FOLDERS", ${WEBAPP_DISABLE_SHARED_CONTACT_FOLDERS});
    define("ENABLE_CONVERSATION_VIEW", ${WEBAPP_ENABLE_CONVERSATION_VIEW});
    define("ENABLE_SHARED_RULES", ${WEBAPP_ENABLE_SHARED_RULES});
    define("ENABLE_DIRECT_BOOKING", ${WEBAPP_ENABLE_DIRECT_BOOKING});
    define("ENABLE_RESPONSE_COMPRESSION", ${WEBAPP_ENABLE_RESPONSE_COMPRESSION});
    define("DISABLE_WELCOME_SCREEN", ${WEBAPP_DISABLE_WELCOME_SCREEN});
    define("DISABLE_WHATS_NEW_DIALOG", ${WEBAPP_DISABLE_WHATS_NEW_DIALOG});
    define("ENABLE_ADVANCED_SETTINGS", ${WEBAPP_ENABLE_ADVANCED_SETTINGS});
    define("FREEBUSY_LOAD_START_OFFSET", ${WEBAPP_FREEBUSY_LOAD_START_OFFSET});
    define("FREEBUSY_LOAD_END_OFFSET", ${WEBAPP_FREEBUSY_LOAD_END_OFFSET});
    define("MAX_EML_FILES_IN_ZIP", ${WEBAPP_MAX_EML_FILES_IN_ZIP});
    define("ENABLE_DEFAULT_SOFT_DELETE", ${WEBAPP_ENABLE_DEFAULT_SOFT_DELETE});
    define("SHARED_STORE_POLLING_INTERVAL", ${WEBAPP_SHARED_STORE_POLLING_INTERVAL});
    define("PREFETCH_EMAIL_COUNT", ${WEBAPP_PREFETCH_EMAIL_COUNT});
    define("PREFETCH_EMAIL_INTERVAL", ${WEBAPP_PREFETCH_EMAIL_INTERVAL});

    ini_set("max_execution_time", 300); 
    define("BLOCK_SIZE", ${WEBAPP_BLOCK_SIZE});
    define("EXPIRES_TIME", ${WEBAPP_EXPIRES_TIME});
    define("STATE_FILE_MAX_LIFETIME", ${WEBAPP_STATE_FILE_MAX_LIFETIME});
    define("UPLOADED_ATTACHMENT_MAX_LIFETIME", ${WEBAPP_UPLOADED_ATTACHMENT_MAX_LIFETIME});
    define("LOG_USER_LEVEL", LOGLEVEL_${webapp_log_level});
    define("LOG_USERS", "${WEBAPP_LOG_USERS}");
    define("LOG_FILE_DIR", "${LOG_PATH_WEBAPP}");
    define("LANGUAGE_DIR", "server/language/");

    if (isset(\$_ENV['LANG']) && \$_ENV['LANG']!="C") {
        define('LANG', \$_ENV["LANG"]); // This means the server environment language determines the web client language.
    } else {
        define('LANG', 'en_US.UTF-8'); // default fallback language
    }

    define("ENABLED_LANGUAGES", "${WEBAPP_ENABLED_LANGUAGES}");

    // Defines the default time zone
    if (!ini_get('date.timezone')) {
        date_default_timezone_set('${TIMEZONE}');
    }

    define("POWERPASTE_WORD_IMPORT", "${WEBAPP_POWERPASTE_WORD_IMPORT}");
    define("POWERPASTE_HTML_IMPORT", "${WEBAPP_POWERPASTE_HTML_IMPORT}");
    define("POWERPASTE_ALLOW_LOCAL_IMAGES", ${WEBAPP_POWERPASTE_ALLOW_LOCAL_IMAGES});

    // Do not log errors into stdout, since this generates faulty JSON responses.
    ini_set("display_errors", false);
    ini_set("log_errors", true);

    error_reporting(E_ERROR);

    // Log successful logins
    define("LOG_SUCCESSFUL_LOGINS", ${WEBAPP_LOG_SUCCESSFUL_LOGINS});

    if (file_exists('debug.php')) {
        include_once('debug.php');
    } else {
        // define empty dump function in case we still use it somewhere
        function dump(){}
    }
?>
EOF
        fi
    fi
}

configure_webapp_plugins() {
    if var_true $WEBAPP_ENABLE_PLUGINS ; then
        print_debug "Webapp Plugins Enabled"
        configure_webapp_plugin_desktop_notifications
        configure_webapp_plugin_file_previewer
        configure_webapp_plugin_files
        configure_webapp_plugin_intranet
        configure_webapp_plugin_manual
        configure_webapp_plugin_mdm
        configure_webapp_plugin_meet
        configure_webapp_plugin_pim_folder
        configure_webapp_plugin_rocketchat
        configure_webapp_plugin_smime
        configure_webapp_plugin_title_counter
    fi
}

configure_webapp_plugin_desktop_notifications() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Desktop Notifications - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-desktopnotifications.php
<?php
// Custom Generated Kopano Webapp Desktop Notification Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_DESKTOPNOTIFICATION_USER_DEFAULT_ENABLE', ${PLUGIN_WEBAPP_DESKTOP_NOTIFICATIONS_DEFAULT_USER});
?>
EOF
    fi
}

configure_webapp_plugin_files() {
    mkdir -p ${WEBAPP_PLUGIN_FILES_CACHE_DIR}
    chown -R ${NGINX_USER}:${NGINX_GROUP} ${WEBAPP_PLUGIN_FILES_CACHE_DIR}

    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Files - Auto Configuring"
        if [ -z "$WEBAPP_PLUGIN_FILES_PASSWORD_IV" ] || [ -z "$WEBAPP_PLUGIN_FILES_PASSWORD_IV" ] ; then
            if [ ! -f ${CONFIG_PATH}webapp/key-files ]; then
                WEBAPP_PLUGIN_FILES_PASSWORD_IV=${WEBAPP_PLUGIN_FILES_PASSWORD_IV:-"$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1)"}
                WEBAPP_PLUGIN_FILES_PASSWORD_KEY=${WEBAPP_PLUGIN_FILES_PASSWORD_KEY:-"$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"}
                cat <<EOF > ${CONFIG_PATH}webapp/key-files
## This is the KEY and IV for the Webapp Files Plugin. If you don't have the variables set then you will lose your account
## credentials upon each startup. Don't delete this file.
## Generated on $(date)

IV: ${WEBAPP_PLUGIN_FILES_PASSWORD_IV}
Key: ${WEBAPP_PLUGIN_FILES_PASSWORD_KEY}
EOF
            else
                WEBAPP_PLUGIN_FILES_PASSWORD_IV=${WEBAPP_PLUGIN_FILES_PASSWORD_IV:-"$(cat ${CONFIG_PATH}webapp/key-files | grep "IV:" | awk '{print $2}')}"}
                WEBAPP_PLUGIN_FILES_PASSWORD_KEY=${WEBAPP_PLUGIN_FILES_PASSWORD_KEY:-"$(cat ${CONFIG_PATH}webapp/key-files | grep "Key:" | awk '{print $2}')}"}
            fi
        fi
        cat <<EOF > ${CONFIG_PATH}webapp/config-files.php
<?php
// Custom Generated Kopano Webapp Files Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_FILES_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_FILES_DEFAULT_USER});
define('PLUGIN_FILES_ASK_BEFORE_DELETE', ${WEBAPP_PLUGIN_FILES_ASK_BEFORE_DELETE});
define('PLUGIN_FILES_CACHE_DIR', "${WEBAPP_PLUGIN_FILES_CACHE_DIR}");
define('PLUGIN_FILESBROWSER_LOGLEVEL', "${files_log_level}");
define('FILES_PASSWORD_KEY', '${WEBAPP_PLUGIN_FILES_PASSWORD_KEY}');
define('FILES_PASSWORD_IV', '${WEBAPP_PLUGIN_FILES_PASSWORD_IV}');
EOF
    fi
}

configure_webapp_plugin_file_previewer() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: File Previewer - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-filepreviewer.php
<?php
// Custom Generated Kopano Webapp Files Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_FILEPREVIEWER_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_FILEPREVIEWER_DEFAULT_USERt});
define('PLUGIN_FILEPREVIEWER_PDF_DEFAULT_ZOOM', "${PLUGIN_FILEPREVIEWER_PDF_DEFAULT_ZOOM}");
define('PLUGIN_FILEPREVIEWER_ODF_DEFAULT_ZOOM', "${PLUGIN_FILEPREVIEWER_ODF_DEFAULT_ZOOM}");
EOF
    fi
}

configure_webapp_plugin_intranet () {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Intranet - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-intranet.php
<?php
// Custom Generated Kopano Webapp Intranet Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_INTRANET_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_INTRANET_DEFAULT_USER});
EOF

    NUM=$(printenv | sort | grep '^WEBAPP_PLUGIN_INTRANET.*TITLE' | wc -l)
    for (( i = 1; i <= $NUM; i++ ))
    do
        intranet_title=WEBAPP_PLUGIN_INTRANET${i}_TITLE
        intranet_url=WEBAPP_PLUGIN_INTRANET${i}_URL
        intranet_autostart=WEBAPP_PLUGIN_INTRANET${i}_AUTOSTART
        intranet_icon=WEBAPP_PLUGIN_INTRANET${i}_ICON
        print_notice "Webapp Plugin: Intranet - Adding Tab #$NUM - ${!intranet_title} - ${!intranet_url}"
        if [ "${!intranet_title}" != "" ] ; then
            if [ "${i}" != "1" ] ; then
                suffix="_$(expr ${i} - 1)"
            fi
            cat <<EOF >> ${CONFIG_PATH}webapp/config-intranet.php

define('PLUGIN_INTRANET_BUTTON_TITLE${suffix}', '${!intranet_title}');
define('PLUGIN_INTRANET_URL${suffix}', '${!intranet_url}');
define('PLUGIN_INTRANET_AUTOSTART${suffix}', ${!intranet_autostart});
define('PLUGIN_INTRANET_ICON${suffix}', '${!intranet_icon}');
EOF
            fi
        done
    fi  
}

configure_webapp_plugin_manual() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Manual - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-webappmanual.php
<?php
// Custom Generated Kopano Webapp Manual Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_WEBAPPMANUAL_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_MANUAL_DEFAULT_USER});
define('PLUGIN_WEBAPPMANUAL_URL', '${WEBAPP_PLUGIN_MANUAL_URL}');
?>
EOF
    fi
}

configure_webapp_plugin_mdm() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: MDM - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-mdm.php
<?php
// Custom Generated Kopano Webapp Manual Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_MDM_USER_DEFAULT_ENABLE_MDM', ${WEBAPP_PLUGIN_MDM_DEFAULT_USER});
define('PLUGIN_MDM_SERVER', '${ZPUSH_HOSTNAME}');
define('PLUGIN_MDM_SERVER_SSL', ${WEBAPP_PLUGIN_MDM_SERVER_SSL});
?>
EOF
    fi
}

configure_webapp_plugin_meet() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Meet - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-pimfolder.php
<?php
define('PLUGIN_MEET_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_MEET_DEFAULT_USER});
define('PLUGIN_MEET_MEET_URL', 'https://${MEET_HOSTNAME}');
//define('PLUGIN_MEET_MEET_JOIN_URL' '/meet/r/join/group/');

}
EOF
    fi
}

configure_webapp_plugin_pim_folder() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: PIM Folder - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-pimfolder.php
<?php
// Custom Generated Kopano Webapp PIM Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_PIMFOLDER_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_PIM_FOLDER_DEFAULT_USER});
?>
EOF
    fi
}

configure_webapp_plugin_rocketchat() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Rocketchat - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-rchat.php
<?php
define('PLUGIN_RCHAT_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_ROCKETCHAT_DEFAULT_USER});
define('PLUGIN_RCHAT_BUTTON_TITLE', '${WEBAPP_PLUGIN_ROCKETCHAT_TITLE}');
define('PLUGIN_RCHAT_HOST', '${WEBAPP_PLUGIN_ROCKETCHAT_HOST}');
define('PLUGIN_RCHAT_PATH', '${WEBAPP_PLUGIN_ROCKETCHAT_PATH}');
define('PLUGIN_RCHAT_AUTOSTART', ${WEBAPP_PLUGIN_ROCKETCHAT_AUTOSTART});
define('PLUGIN_RCHAT_ICON', '${WEBAPP_PLUGIN_ROCKETCHAT_ICON}');
EOF
    fi
}

configure_webapp_plugin_smime() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: S/MIME - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-smime.php
<?php
// Custom Generated Kopano Webapp S/MIME Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

DEFINE('PLUGIN_SMIME_USER_DEFAULT_ENABLE_SMIME', ${WEBAPP_PLUGIN_SMIME_DEFAULT_USER});
DEFINE('PLUGIN_SMIME_CACERTS', '${WEBAPP_PLUGIN_SMIME_CACERTS_LOCATION}');
DEFINE('PLUGIN_SMIME_CIPHER', ${WEBAPP_PLUGIN_SMIME_CIPHER}); 
DEFINE('PLUGIN_SMIME_PASSPHRASE_REMEMBER_BROWSER', ${WEBAPP_PLUGIN_SMIME_BROWSER_REMEMBER_PASSPHRASE});
DEFINE('PLUGIN_SMIME_ENABLE_OCSP', ${WEBAPP_PLUGIN_SMIME_ENABLE_OCSP});
?>
EOF
    fi
}

configure_webapp_plugin_title_counter() {
    if [ "$SETUP_TYPE" = "AUTO" ]; then
        print_notice "Webapp Plugin: Title Counter - Auto Configuring"
        cat <<EOF > ${CONFIG_PATH}webapp/config-titlecounter.php
<?php
// Custom Generated Kopano Webapp Title Counter Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('PLUGIN_TITLECOUNTER_USER_DEFAULT_ENABLE', ${WEBAPP_PLUGIN_TITLE_COUNTER_DEFAULT_USER});
?>
EOF
    fi
}

configure_zpush() {
    if var_true ${ENABLE_ZPUSH} ; then
        print_notice "Z-Push: Enabled"
        ### Configure Nginx
        if [ "${ZPUSH_HOSTNAME}" = "${WEBAPP_HOSTNAME}" ] ; then
            sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/zpush-activesync.template;" /etc/nginx/conf.available/webapp.template  
        else
            sed -i "s|<ZPUSH_HOSTNAME>|${ZPUSH_HOSTNAME}|g" /etc/nginx/conf.available/zpush.template
            sed -i "s|<LISTEN_PORT>|${NGINX_LISTEN_PORT}|g" /etc/nginx/conf.available/zpush.template
            sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/zpush-activesync.template;" /etc/nginx/conf.available/zpush.template
            ln -s /etc/nginx/conf.available/zpush.template /etc/nginx/conf.d/zpush.conf
        fi
        sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/zpush-activesync.template
        sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/zpush-activesync.template
        zpush_content_body_size=$(echo ${ZPUSH_CONTENT_BODY_SIZE} | tr -dc 0-9)
        zpush_content_body_size_unit=$(echo ${ZPUSH_CONTENT_BODY_SIZE} | tr -dc 'a-zA-Z')
        zpush_content_body_size_overhead=$(echo $(scale=1; echo ${zpush_content_body_size}*1.33 | bc | awk '{printf "%.0f\n", $1}'))
        print_debug "Setting Z-Push Content Body overhead to '${zpush_content_body_size_overhead}${zpush_content_body_size_unit}' from message size '${ZPUSH_CONTENT_BODY_SIZE}'"
        sed -i "s|<ZPUSH_CONTENT_BODY_SIZE>|${zpush_content_body_size_overhead}${zpush_content_body_size_unit}|g" /etc/nginx/conf.available/zpush-activesync.template
        if [ "$SETUP_TYPE" = "AUTO" ]; then
            print_notice "Z-Push: Autoconfiguring"

            ### Z-Push IPC Provider Configuration
            case "${ZPUSH_IPC_PROVIDER}" in
                "MEMCACHED" | "memcached" | "memcache" | "memcache" )
                    print_debug "Z-Push: Configuring Memcached State Type"
                    zpush_ipc_provider="IpcMemcachedProvider"
                    sanity_var ZPUSH_MEMCACHED_HOST "Z-Push Memcached Host"
                    rm -rf /usr/share/zpush/src/backend/ipcmemcached/config.php
                    ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_MEMCACHED_FILE} /usr/share/zpush/src/backend/ipcmemcached/config.php
                    cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_MEMCACHED_FILE}
<?php
// Custom Generated ZPush Kopano Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('MEMCACHED_SERVERS','${ZPUSH_MEMCACHED_HOST}:${ZPUSH_MEMCACHED_PORT}');
define('MEMCACHED_DOWN_LOCK_FILE', '/tmp/z-push-memcache-down');
define('MEMCACHED_DOWN_LOCK_EXPIRATION', ${ZPUSH_MEMCACHED_LOCK_EXPIRATION});
define('MEMCACHED_PREFIX', '${ZPUSH_MEMCACHED_PREFIX}');
define('MEMCACHED_TIMEOUT', ${ZPUSH_MEMCACHED_TIMEOUT});
define('MEMCACHED_MUTEX_TIMEOUT', ${ZPUSH_MEMCACHED_TIMEOUT_MUTEX});
define('MEMCACHED_BLOCK_WAIT', ${ZPUSH_MEMCACHED_BLOCK_WAIT});
EOF
                ;;
                "SHARED" | "shared" | "DEFAULT" | "default" )
                    zpush_ipc_provider="IpcSharedMemoryProvider"
                ;;
            esac

            ### Z-Push State Type Configuration
            case "${ZPUSH_STATE_TYPE}" in
                "FILE" | "file" )
                    mkdir -p ${ZPUSH_STATE_FILE_PATH}
                    chown -R ${NGINX_USER}:${NGINX_GROUP} ${ZPUSH_STATE_FILE_PATH}
                    zpush_state_type="FILE"
                ;;
                "SQL" | "sql" | "DB" | "db" )
                    print_debug "Configuring Z-Push SQL State Type"
                    zpush_state_type="SQL"
                    rm -rf /usr/share/zpush/src/backend/sqlstatemachine/config.php
                    ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_SQL_FILE} /usr/share/zpush/src/backend/sqlstatemachine/config.php
                    cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_SQL_FILE}

<?php
define('STATE_SQL_ENGINE', '${ZPUSH_DB_TYPE}');
define('STATE_SQL_SERVER', '${ZPUSH_DB_HOST}');
define('STATE_SQL_PORT', '${ZPUSH_DB_PORT}');
define('STATE_SQL_DATABASE', '${ZPUSH_DB_NAME}');
define('STATE_SQL_USER', '${ZPUSH_DB_USER}');
define('STATE_SQL_PASSWORD', '${ZPUSH_DB_PASS}');
define('STATE_SQL_OPTIONS', serialize(array(PDO::ATTR_PERSISTENT => true)));
EOF
                ;;
            esac

            ### Z-Push Configuration
            print_debug "Z-Push: Autoconfiguring"
            rm -rf /usr/share/zpush/src/config.php
            ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_FILE} /usr/share/zpush/src/config.php
            cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_FILE}
<?php
// Custom Generated ZPush Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

    define('TIMEZONE', '${TIMEZONE}');
    define('BASE_PATH', dirname(\$_SERVER['SCRIPT_FILENAME']). '/');
    define('SCRIPT_TIMEOUT', 0);
    define('USE_CUSTOM_REMOTE_IP_HEADER', false);
    define("CERTIFICATE_OWNER_PARAMETER", "SSL_CLIENT_S_DN_CN");
    define('USE_FULLEMAIL_FOR_LOGIN', ${ZPUSH_LOGIN_EMAIL});
    define('STATE_MACHINE', '${zpush_state_type}');
    define('STATE_DIR', '${ZPUSH_STATE_FILE_PATH}');
    define('IPC_PROVIDER', '${zpush_ipc_provider}');
    define('LOGBACKEND', 'filelog');
    define('LOGLEVEL', LOGLEVEL_${zpush_log_level});
    define('LOGAUTHFAIL', ${LOG_ZPUSH_AUTH_FAIL});
    define('LOGUSERLEVEL', LOGLEVEL_DEVICEID);
    \$specialLogUsers = array();
    define('LOGFILEDIR', '${LOG_PATH_ZPUSH}');
    define('LOGFILE', LOGFILEDIR . '${LOG_FILE_ZPUSH}');
    define('LOGERRORFILE', LOGFILEDIR . '${LOG_FILE_ZPUSH_ERROR}');
    define('LOG_SYSLOG_HOST', false);
    define('LOG_SYSLOG_PORT', 514);
    define('LOG_SYSLOG_PROGRAM', 'z-push');
    define('LOG_SYSLOG_FACILITY', LOG_LOCAL0);

/**********************************************************************************
 *  Mobile settings
 */
    define('PROVISIONING', ${ZPUSH_ENABLE_PROVISIONING});
    define('LOOSE_PROVISIONING', ${ZPUSH_PROVISIONING_LOOSE});
    define('PROVISIONING_POLICYFILE', '${ZPUSH_PROVISIONING_FILE_POLICY}');
    define('SYNC_CONFLICT_DEFAULT', ${ZPUSH_CONFLICT_HANDLER});
    define('SYNC_FILTERTIME_MAX', ${ZPUSH_SYNC_MAX_FILTERTIME});
    define('PING_INTERVAL', ${ZPUSH_PING_INTERVAL});
    define('FILEAS_ORDER', ${ZPUSH_CONTACT_FILE_ORDER});
    define('SYNC_MAX_ITEMS', ${ZPUSH_SYNC_MAX_ITEMS});
    define('UNSET_UNDEFINED_PROPERTIES', ${ZPUSH_SYNC_UNSET_UNDEFINED_PROPERTIES});
    define('SYNC_CONTACTS_MAXPICTURESIZE', ${ZPUSH_SYNC_MAX_CONTACTS_PICTURE_SIZE});
    define('ALLOW_WEBSERVICE_USERS_ACCESS', ${ZPUSH_ENABLE_WEBSERVICE_USERS_ACCESS});
    define('USE_PARTIAL_FOLDERSYNC', ${ZPUSH_SYNC_ENABLE_PARTIAL_FOLDERSYNC});
    define('PING_LOWER_BOUND_LIFETIME', ${ZPUSH_PING_LIFETIME_HIGHER});
    define('PING_HIGHER_BOUND_LIFETIME', ${ZPUSH_PING_LIFETIME_HIGHER});
    define('SYNC_TIMEOUT_MEDIUM_DEVICETYPES', "${ZPUSH_SYNC_TIMEOUT_DEVICETYPES_MEDIUM}");
    define('SYNC_TIMEOUT_LONG_DEVICETYPES',   "${ZPUSH_SYNC_TIMEOUT_DEVICETYPES_LONG}");
    define('RETRY_AFTER_DELAY', ${ZPUSH_SYNC_RETRY_DELAY});
    define('BACKEND_PROVIDER', '${ZPUSH_BACKEND_PROVIDER}');
    define('SEARCH_PROVIDER', '${ZPUSH_SEARCH_PROVIDER}');
    define('SEARCH_WAIT', ${ZPUSH_SEARCH_TIME});
    define('SEARCH_MAXRESULTS', ${ZPUSH_SEARCH_MAX_RESULTS});
    define('KOE_CAPABILITY_GAB', ${ZPUSH_OUTLOOK_ENABLE_GAB});
    define('KOE_CAPABILITY_RECEIVEFLAGS', ${ZPUSH_OUTLOOK_ENABLE_RECEIVE_FLAGS});
    define('KOE_CAPABILITY_SENDFLAGS', ${ZPUSH_OUTLOOK_ENABLE_SEND_FLAGS});
    define('KOE_CAPABILITY_OOF', ${ZPUSH_OUTLOOK_ENABLE_OUT_OF_OFFICE});
    define('KOE_CAPABILITY_OOFTIMES', ${ZPUSH_OUTLOOK_ENABLE_OUT_OF_OFFICE_TIMES});
    define('KOE_CAPABILITY_NOTES', ${ZPUSH_OUTLOOK_ENABLE_NOTES});
    define('KOE_CAPABILITY_SHAREDFOLDER', ${ZPUSH_OUTLOOK_ENABLE_SHARED_FOLDERS});
    define('KOE_CAPABILITY_SENDAS', ${ZPUSH_OUTLOOK_ENABLE_SEND_AS});
    define('KOE_CAPABILITY_SECONDARYCONTACTS', ${ZPUSH_OUTLOOK_ENABLE_SECONDARY_CONTACTS});
    define('KOE_CAPABILITY_SIGNATURES', ${ZPUSH_OUTLOOK_ENABLE_SIGNATURES});
    define('KOE_CAPABILITY_RECEIPTS', ${ZPUSH_OUTLOOK_ENABLE_IMPERSONATE});
    define('KOE_CAPABILITY_IMPERSONATE', ${ZPUSH_OUTLOOK_ENABLE_IMPERSONATE});
    define('KOE_GAB_STORE', '${ZPUSH_OUTLOOK_GAB_STORE}');
    define('KOE_GAB_FOLDERID', '${ZPUSH_OUTLOOK_GAB_FOLDERID}');
    define('KOE_GAB_NAME', '${ZPUSH_OUTLOOK_GAB_NAME}');

/**********************************************************************************
 *  Synchronize additional folders to all mobiles
 *
 *  With this feature, special folders can be synchronized to all mobiles.
 *  This is useful for e.g. global company contacts.
 *
 *  This feature is supported only by certain devices, like iPhones.
 *  Check the compatibility list for supported devices:
 *      http://z-push.org/compatibility
 *
 *  To synchronize a folder, add a section setting all parameters as below:
 *      store:      the ressource where the folder is located.
 *                  Kopano users use 'SYSTEM' for the 'Public Folder'
 *      folderid:   folder id of the folder to be synchronized
 *      name:       name to be displayed on the mobile device
 *      type:       supported types are:
 *                      SYNC_FOLDER_TYPE_USER_CONTACT
 *                      SYNC_FOLDER_TYPE_USER_APPOINTMENT
 *                      SYNC_FOLDER_TYPE_USER_TASK
 *                      SYNC_FOLDER_TYPE_USER_MAIL
 *                      SYNC_FOLDER_TYPE_USER_NOTE
 *      flags:      sets additional options on the shared folder. Supported are:
 *                      DeviceManager::FLD_FLAGS_NONE
 *                          No flags configured, default flag to be set
 *                      DeviceManager::FLD_FLAGS_SENDASOWNER
 *                          When replying in this folder, automatically do Send-As
 *                      DeviceManager::FLD_FLAGS_CALENDARREMINDERS
 *                          If set, Outlook shows reminders for these shares with KOE
 *                      DeviceManager::FLD_FLAGS_NOREADONLYNOTIFY
 *                          If set, Z-Push won't send notification emails for changes
 *                          if the folder is read-only
 *
 *  Additional notes:
 *  - on Kopano systems use backend/kopano/listfolders.php script to get a list
 *    of available folders
 *
 *  - all Z-Push users must have at least reading permissions so the configured
 *    folders can be synchronized to the mobile. Else they are ignored.
 *
 *  - this feature is only partly suitable for multi-tenancy environments,
 *    as ALL users from ALL tenents need access to the configured store & folder.
 *    When configuring a public folder, this will cause problems, as each user has
 *    a different public folder in his tenant, so the folder are not available.

 *  - changing this configuration could cause HIGH LOAD on the system, as all
 *    connected devices will be updated and load the data contained in the
 *    added/modified folders.
 */

    \$additionalFolders = array(
        // demo entry for the synchronization of contacts from the public folder.
        // uncomment (remove '/*' '*/') and fill in the folderid
/*
        array(
            'store'     => "SYSTEM",
            'folderid'  => "",
            'name'      => "Public Contacts",
            'type'      => SYNC_FOLDER_TYPE_USER_CONTACT,
            'flags'     => DeviceManager::FLD_FLAGS_NONE,
        ),
*/
    );

EOF

            ### Z-Push Kopano Specific Configuration
            create_zpush_templates
            print_debug "Z-Push: Configuring Kopano Settings"
            rm -rf /usr/share/zpush/src/backend/kopano/config.php
            ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_KOPANO_FILE} /usr/share/zpush/src/backend/kopano/config.php
            cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_KOPANO_FILE}
<?php
// Custom Generated ZPush Kopano Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('MAPI_SERVER', '${ZPUSH_SOCKET_SERVER}');

define('READ_ONLY_NOTIFY_LOST_DATA', ${ZPUSH_READ_ONLY_NOTIFY_LOST_DATA});
define('READ_ONLY_NOTIFY_YOURDATA', '${ZPUSH_READ_ONLY_NOTIFY_YOUR_DATA}');
define('READ_ONLY_NOTIFY_SUBJECT', "${ZPUSH_READ_ONLY_NOTIFY_SUBJECT}");
define('READ_ONLY_NOTIFY_BODY', <<<END
$(cat ${TEMPLATE_ZPUSH_PATH}${TEMPLATE_ZPUSH_NOTIFY})
END
         );

define('READ_ONLY_NOTIFY_DATE_FORMAT', "${ZPUSH_READ_ONLY_NOTIFY_TIME_FORMAT}");
define('READ_ONLY_NOTIFY_TIME_FORMAT', "${ZPUSH_READ_ONLY_NOTIFY_TIME_FORMAT}");
define('READ_ONLY_NONOTIFY', '${ZPUSH_READ_ONLY_NOTIFY_NO_NOTIFY}');
EOF

            ### Z-Push Tools
            print_debug "Z-Push: Tools - Configuring List Shared Folders"
            sed -i "s|define('ZPUSH_BASE_PATH', \"/usr/share/z-push\");|define(\'ZPUSH_BASE_PATH\', \"/usr/share/zpush/src\");|g" /usr/share/zpush/tools/list-shared-folders.php
            print_debug "Z-Push: Tools - Configuring Convert Files State to DB"
            sed -i "s|define('ZPUSH_BASE_PATH', \"/usr/share/z-push\");|define(\'ZPUSH_BASE_PATH\', \"/usr/share/zpush/src\");|g" /usr/share/zpush/tools/migrate-filestates-to-db.php

            ### Z-Push Kopano GAB2Contacts Configuration
            print_debug "Z-Push: Tools - Configuring GAB2Contacts"
            rm -rf /usr/share/zpush/tools/gab2contacts/config.php
            ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_GAB2CONTACTS_FILE} /usr/share/zpush/tools/gab2contacts/config.php
            cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_GAB2CONTACTS_FILE}
<?php
// Custom Generated ZPush Kopano Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('HASHFIELD', 'account');
define('CONTACTWORKER', 'Kopano');
define('SERVER', '${ZPUSH_SOCKET_SERVER}');
define('USERNAME', 'SYSTEM');
define('PASSWORD', '');
define('CERTIFICATE', null);
define('CERTIFICATE_PASSWORD', null);
define('SOURCE_GAB', 'default');
define('CONTACT_FOLDERSTORE', 'SYSTEM');
define('CONTACT_FOLDERID', '');

// Set the fileas (save as) order for contacts.
// Possible values are:
//   SYNC_FILEAS_FIRSTLAST    - fileas will be "Firstname Lastname"
//   SYNC_FILEAS_LASTFIRST    - fileas will be "Lastname, Firstname"
//   SYNC_FILEAS_COMPANYONLY  - fileas will be "Company"
//   SYNC_FILEAS_COMPANYLAST  - fileas will be "Company (Lastname, Firstname)"
//   SYNC_FILEAS_COMPANYFIRST - fileas will be "Company (Firstname Lastname)"
//   SYNC_FILEAS_LASTCOMPANY  - fileas will be "Lastname, Firstname (Company)"
//   SYNC_FILEAS_FIRSTCOMPANY - fileas will be "Firstname Lastname (Company)"
//
// The company-fileas will only be set if a contact has a company set. If one of
// company-fileas is selected and a contact doesn't have a company set, it will default
// to SYNC_FILEAS_FIRSTLAST or SYNC_FILEAS_LASTFIRST (depending on if last or first
// option is selected for company).
// If SYNC_FILEAS_COMPANYONLY is selected and company of the contact is not set
// SYNC_FILEAS_LASTFIRST will be used
define('FILEAS_ORDER', SYNC_FILEAS_LASTFIRST);
EOF

            ### Z-Push Kopano GAB2Contacts Configuration
            create_zpush_templates
            print_debug "Z-Push: Configuring GAB Sync"
            rm -rf /usr/share/zpush/tools/gab-sync/config.php
            ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_GABSYNC_FILE} /usr/share/zpush/tools/gab-sync/config.php
            cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_GABSYNC_FILE}
<?php
// Custom Generated ZPush GAB Sync Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

define('HASHFIELD', 'account');
define('AMOUNT_OF_CHUNKS', 10);
define('SYNCWORKER', 'Kopano');
define('UNIQUEID', 'account');
define('SERVER', '${ZPUSH_SOCKET_SERVER}');
define('USERNAME', 'SYSTEM');
define('PASSWORD', '');
define('CERTIFICATE', null);
define('CERTIFICATE_PASSWORD', null);
define('HIDDEN_FOLDERSTORE', 'SYSTEM');
define('HIDDEN_FOLDERNAME', 'Z-Push-KOE-GAB');
define('GAB_SYNC_USER', 1);
define('GAB_SYNC_CONTACT', 2);
define('GAB_SYNC_GROUP', 4);
define('GAB_SYNC_ROOM', 8);
define('GAB_SYNC_EQUIPMENT', 16);
define('GAB_SYNC_ALL', GAB_SYNC_USER | GAB_SYNC_CONTACT | GAB_SYNC_GROUP | GAB_SYNC_ROOM | GAB_SYNC_EQUIPMENT);
define('GAB_SYNC_TYPES', GAB_SYNC_ALL);
EOF
        fi

        if var_true $ZPUSH_ENABLE_AUTODISCOVER ; then
            print_notice "Z-Push: Enabling Autodiscover"
            
            if [ "$SETUP_TYPE" = "AUTO" ]; then
                print_debug "Z-Push: Autoconfiguring"
                ### Configure Nginx
                if [ "${ZPUSH_HOSTNAME}" = "${WEBAPP_HOSTNAME}" ] ; then
                    sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/zpush-autodiscover.template;" /etc/nginx/conf.available/webapp.template    
                else
                    sed -i "/### Includes/a\ \ \ \ \ \ include \/etc\/nginx\/conf.available\/zpush-autodiscover.template;" /etc/nginx/conf.available/zpush.template
                fi
                ### Configure Nginx
                sed -i "s|<LOG_ACCESS_LOCATION>|${NGINX_LOG_ACCESS_LOCATION}|g" /etc/nginx/conf.available/zpush-autodiscover.template
                sed -i "s|<LOG_ERROR_LOCATION>|${NGINX_LOG_ERROR_LOCATION}|g" /etc/nginx/conf.available/zpush-autodiscover.template
                rm -rf /usr/share/zpush/src/autodiscover/config.php
                ln -sf ${CONFIG_PATH}${ZPUSH_CONFIG_AUTODISCOVER_FILE} /usr/share/zpush/src/autodiscover/config.php
                cat <<EOF > ${CONFIG_PATH}${ZPUSH_CONFIG_AUTODISCOVER_FILE}
<?php
// Custom Generated ZPush AutoDiscover Configuration! Do not edit, instead set ENV Vars
// If you want to use your own configuration files set SETUP_TYPE=MANUAL when starting container
// Last Generated on $(date)

    define('ZPUSH_HOST', '${ZPUSH_HOSTNAME}');
    define('TIMEZONE', '${TIMEZONE}');
    define('BASE_PATH', dirname(\$_SERVER['SCRIPT_FILENAME']). '/');
    define('USE_FULLEMAIL_FOR_LOGIN', ${ZPUSH_LOGIN_USE_EMAIL});

    /*
     * AutoDiscover requires the username to match either the email address
     * or the local part of the email address.
     * AUTODISCOVER_LOGIN_EMAIL             - uses the email address as provided when setting up the account
     * AUTODISCOVER_LOGIN_NO_DOT            - removes the '.' from email address:
     *                                          email: first.last@domain.com -> resulting username: firstlast
     * AUTODISCOVER_LOGIN_F_NO_DOT_LAST     - cuts the first part before '.' after the first letter and
     *                                          removes the '.' from email address:
     *                                          email: first.last@domain.com -> resulting username: flast
     * AUTODISCOVER_LOGIN_F_DOT_LAST        - cuts the part before '.' after the first letter and
     *                                          leaves the part after '.' as is:
     *                                          email: first.last@domain.com -> resulting username: f.last
     */
    define('AUTODISCOVER_LOGIN_TYPE', ${ZPUSH_AUTODISCOVER_LOGIN_TYPE});
    define('LOGBACKEND', 'filelog');

    define('LOGFILEDIR', '${LOG_PATH_ZPUSH}');
    define('LOGFILE', LOGFILEDIR . '${LOG_FILE_ZPUSH_AUTODISCOVER}');
    define('LOGERRORFILE', LOGFILEDIR . '${LOG_FILE_ZPUSH_AUTODISCOVER}');
    define('LOGLEVEL', LOGLEVEL_${zpush_log_level});
    define('LOGUSERLEVEL', LOGLEVEL);
    \$specialLogUsers = array();
    define('LOG_SYSLOG_HOST', false);
    define('LOG_SYSLOG_PORT', 514);
    define('LOG_SYSLOG_PROGRAM', 'z-push-autodiscover');
    define('LOG_SYSLOG_FACILITY', LOG_LOCAL0);
    define('BACKEND_PROVIDER', '${ZPUSH_BACKEND_PROVIDER}');
EOF
            fi
        fi

        ### Setup Scheduled GAB to Contacts
        configure_cron_zpush_gab2contacts
        
        ### Change Output of ZPush when visiting with webbrowser in Debug Mode
        if var_true ${ENABLE_ZPUSH_CUSTOM_INDEX} ; then
            print_debug "Z-Push: Changing Z-Push Custom HTML Output with template"
            zpush_custom_index=$(mktemp)
            awk 'BEGIN {p=1}/print <<<END/{print;system("cat ${ZPUSH_CUSTOM_INDEX_FILE}");p=0}/^END\;/{p=1} p' /usr/share/zpush/src/lib/core/zpush.php > ${zpush_custom_index}
            cp -R ${zpush_custom_index} /usr/share/zpush/src/lib/core/zpush.php         
        fi
    fi
}

create_store() {
    check_store=$(kopano-cli --list-stores | tail -n 1)
    if [ "$check_store" = "--------------------------------" ] ; then
        print_notice "Server: Creating Public Store"
        silent kopano-cli --create-store
    fi
}

create_quota_templates() {
    print_notice "Setting up Quota Templates"
    mkdir -p ${TEMPLATE_MONITOR_PATH}
    for f in /assets/kopano/templates/*
    do
        if [ ! -f ${TEMPLATE_MONITOR_PATH}/$(basename $f) ] ; then
            print_debug "Quota Templates: Copying Template: $(basename $f)"
            cp -R $f ${TEMPLATE_MONITOR_PATH}
        fi
    done
}

create_user_scripts() {
    print_notice "Setting up User Scripts"
    mkdir -p ${USERSCRIPT_PATH}
    for f in /assets/kopano/userscripts/*
    do
        if [ ! -f ${USERSCRIPT_PATH}/$(basename $f) ] ; then
            print_debug "User Scripts: Copying User Script: $(basename $f)"
            cp -R $f ${USERSCRIPT_PATH}
        fi
    done
}

create_zpush_templates() {
    print_notice "Setting up Z-Push Templates"
    mkdir -p ${TEMPLATE_ZPUSH_PATH}
    for f in /assets/zpush/templates/*
    do
        if [ ! -f ${TEMPLATE_ZPUSH_PATH}/$(basename $f) ] ; then
            print_debug "Copying Template: $(basename $f)"
            cp -R $f ${TEMPLATE_ZPUSH_PATH}
        fi
    done
}

move_remaining_config() {
    print_notice "Moving all remaining Config"
    for f in /assets/kopano/config/*
    do
        if [ ! -d "$f" ]; then
            if [ ! -f ${CONFIG_PATH}/$(basename $f) ] ; then
                print_debug "Copying Config: $(basename $f)"
                cp -R $f ${CONFIG_PATH}
            fi
        fi
    done
    for f in /assets/kopano/config/webapp/*
    do
        if [ ! -d "$f" ]; then
            if [ ! -f ${CONFIG_PATH}/webapp/$(basename $f) ] ; then
                print_debug "Copying Config: $(basename $f)"
                cp -R $f ${CONFIG_PATH}/webapp/
            fi
        fi
    done
}

parse_config() {
    if [ -f ${1} ] ; then
        print_debug "Parsing Config ${1}"
        while IFS="" read -r line || [ -n "$line" ]
            do
            if [[ "${line}" == *" = "* ]] ; then
                name=$(echo $line | awk '{print $1}')
                value=$(echo $line | awk '{print $3}')
                export $name=$value
            fi
        done < ${1}
    else
        print_error "Tried to parse config ${1} but it doesn't exist!"
    fi
}

wait_for_server() {
    case "${SOCKET_SERVER}" in
            "file://"* )
                print_notice "Checking to see if Kopano Server socket is avaialable"
                wait_for_socket ${SOCKET_SERVER}
            ;;
            "htt"* )
                print_notice "Checking to see if Kopano Server port is avaialable"
                kchost=$(echo "${SOCKET_SERVER}" | awk -F / '{print $3}' | awk -F : '{print $1}')
                kcport=$(echo "${SOCKET_SERVER}" | awk -F / '{print $3}' | awk -F : '{print $2}')
                wait_for_port $kchost $kcport
            ;;
    esac
}

wait_for_search() {
    case "${SOCKET_SEARCH}" in
            "file://"* )
                print_notice "Checking to see if Kopano Search socket is avaialable"
                wait_for_socket ${SOCKET_SEARCH}
            ;;
            "htt"* )
                print_notice "Checking to see if Kopano Server port is avaialable"
                kshost=$(echo "${SOCKET_SEARCH}" | awk -F / '{print $3}' | awk -F : '{print $1}')
                Ksport=$(echo "${SOCKET_SEARCH}" | awk -F / '{print $3}' | awk -F : '{print $2}')
                wait_for_port $kshost $ksport
            ;;
    esac
}